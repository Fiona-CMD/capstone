/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2019 */

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O)
{
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ 'x', 's', 'a', 'v', 'e', 'c', '6', '4', 9, 0,
  /* 10 */ 'x', 's', 'a', 'v', 'e', '6', '4', 9, 0,
  /* 19 */ 'x', 'r', 's', 't', 'o', 'r', '6', '4', 9, 0,
  /* 29 */ 'x', 's', 'a', 'v', 'e', 's', '6', '4', 9, 0,
  /* 39 */ 'x', 'r', 's', 't', 'o', 'r', 's', '6', '4', 9, 0,
  /* 50 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', '6', '4', 9, 0,
  /* 62 */ 'l', 'e', 'a', 9, 0,
  /* 67 */ 'j', 'a', 9, 0,
  /* 71 */ 's', 'e', 't', 'a', 9, 0,
  /* 77 */ 'c', 'm', 'o', 'v', 'a', 9, 0,
  /* 84 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '1', '6', 'b', 9, 0,
  /* 96 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', '8', 'b', 9, 0,
  /* 107 */ 's', 'b', 'b', 9, 0,
  /* 112 */ 'j', 'b', 9, 0,
  /* 116 */ 'i', 'n', 's', 'b', 9, 0,
  /* 122 */ 's', 't', 'o', 's', 'b', 9, 0,
  /* 129 */ 'c', 'm', 'p', 's', 'b', 9, 0,
  /* 136 */ 'm', 'o', 'v', 's', 'b', 9, 0,
  /* 143 */ 's', 'e', 't', 'b', 9, 0,
  /* 149 */ 's', 'u', 'b', 9, 0,
  /* 154 */ 'c', 'm', 'o', 'v', 'b', 9, 0,
  /* 161 */ 'a', 'd', 'c', 9, 0,
  /* 166 */ 'd', 'e', 'c', 9, 0,
  /* 171 */ 'x', 's', 'a', 'v', 'e', 'c', 9, 0,
  /* 179 */ 'i', 'n', 'c', 9, 0,
  /* 184 */ 'b', 't', 'c', 9, 0,
  /* 189 */ 'a', 'a', 'd', 9, 0,
  /* 194 */ 'v', 'm', 'r', 'e', 'a', 'd', 9, 0,
  /* 202 */ 'x', 'a', 'd', 'd', 9, 0,
  /* 208 */ 'r', 'd', 's', 'e', 'e', 'd', 9, 0,
  /* 216 */ 'i', 'n', 'v', 'p', 'c', 'i', 'd', 9, 0,
  /* 225 */ 'r', 'd', 'p', 'i', 'd', 9, 0,
  /* 232 */ 'i', 'n', 'v', 'v', 'p', 'i', 'd', 9, 0,
  /* 241 */ 's', 'h', 'l', 'd', 9, 0,
  /* 247 */ 'v', 'm', 'p', 't', 'r', 'l', 'd', 9, 0,
  /* 256 */ 'r', 'd', 'r', 'a', 'n', 'd', 9, 0,
  /* 264 */ 'b', 'o', 'u', 'n', 'd', 9, 0,
  /* 271 */ 'i', 'n', 'c', 's', 's', 'p', 'd', 9, 0,
  /* 280 */ 'r', 'd', 's', 's', 'p', 'd', 9, 0,
  /* 288 */ 's', 'h', 'r', 'd', 9, 0,
  /* 294 */ 'i', 'n', 's', 'd', 9, 0,
  /* 300 */ 's', 't', 'o', 's', 'd', 9, 0,
  /* 307 */ 'c', 'm', 'p', 's', 'd', 9, 0,
  /* 314 */ 'w', 'r', 's', 's', 'd', 9, 0,
  /* 321 */ 'w', 'r', 'u', 's', 's', 'd', 9, 0,
  /* 329 */ 'm', 'o', 'v', 's', 'd', 9, 0,
  /* 336 */ 'm', 'o', 'v', 's', 'x', 'd', 9, 0,
  /* 344 */ 'j', 'a', 'e', 9, 0,
  /* 349 */ 's', 'e', 't', 'a', 'e', 9, 0,
  /* 356 */ 'c', 'm', 'o', 'v', 'a', 'e', 9, 0,
  /* 364 */ 'j', 'b', 'e', 9, 0,
  /* 369 */ 's', 'e', 't', 'b', 'e', 9, 0,
  /* 376 */ 'c', 'm', 'o', 'v', 'b', 'e', 9, 0,
  /* 384 */ 'j', 'g', 'e', 9, 0,
  /* 389 */ 's', 'e', 't', 'g', 'e', 9, 0,
  /* 396 */ 'c', 'm', 'o', 'v', 'g', 'e', 9, 0,
  /* 404 */ 'j', 'e', 9, 0,
  /* 408 */ 'j', 'l', 'e', 9, 0,
  /* 413 */ 's', 'e', 't', 'l', 'e', 9, 0,
  /* 420 */ 'c', 'm', 'o', 'v', 'l', 'e', 9, 0,
  /* 428 */ 'j', 'n', 'e', 9, 0,
  /* 433 */ 'l', 'o', 'o', 'p', 'n', 'e', 9, 0,
  /* 441 */ 's', 'e', 't', 'n', 'e', 9, 0,
  /* 448 */ 'c', 'm', 'o', 'v', 'n', 'e', 9, 0,
  /* 456 */ 'l', 'o', 'o', 'p', 'e', 9, 0,
  /* 463 */ 'r', 'd', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 473 */ 'w', 'r', 'f', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 483 */ 'r', 'd', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 493 */ 'w', 'r', 'g', 's', 'b', 'a', 's', 'e', 9, 0,
  /* 503 */ 's', 'e', 't', 'e', 9, 0,
  /* 509 */ 'v', 'm', 'w', 'r', 'i', 't', 'e', 9, 0,
  /* 518 */ 'p', 't', 'w', 'r', 'i', 't', 'e', 9, 0,
  /* 527 */ 'x', 's', 'a', 'v', 'e', 9, 0,
  /* 534 */ 'c', 'm', 'o', 'v', 'e', 9, 0,
  /* 541 */ 'b', 's', 'f', 9, 0,
  /* 546 */ 'r', 'e', 't', 'f', 9, 0,
  /* 552 */ 'n', 'e', 'g', 9, 0,
  /* 557 */ 'c', 'm', 'p', 'x', 'c', 'h', 'g', 9, 0,
  /* 566 */ 'j', 'g', 9, 0,
  /* 570 */ 'i', 'n', 'v', 'l', 'p', 'g', 9, 0,
  /* 578 */ 's', 'e', 't', 'g', 9, 0,
  /* 584 */ 'c', 'm', 'o', 'v', 'g', 9, 0,
  /* 591 */ 'p', 'u', 's', 'h', 9, 0,
  /* 597 */ 's', 'a', 'l', 9, 0,
  /* 602 */ 'r', 'c', 'l', 9, 0,
  /* 607 */ 's', 'h', 'l', 9, 0,
  /* 612 */ 'j', 'l', 9, 0,
  /* 616 */ 'l', 'c', 'a', 'l', 'l', 9, 0,
  /* 623 */ 'r', 'o', 'l', 9, 0,
  /* 628 */ 'a', 'r', 'p', 'l', 9, 0,
  /* 634 */ 'l', 's', 'l', 9, 0,
  /* 639 */ 's', 'e', 't', 'l', 9, 0,
  /* 645 */ 'i', 'm', 'u', 'l', 9, 0,
  /* 651 */ 'c', 'm', 'o', 'v', 'l', 9, 0,
  /* 658 */ 'a', 'a', 'm', 9, 0,
  /* 663 */ 'a', 'n', 'd', 'n', 9, 0,
  /* 669 */ 'v', 'm', 'x', 'o', 'n', 9, 0,
  /* 676 */ 'j', 'o', 9, 0,
  /* 680 */ 'j', 'n', 'o', 9, 0,
  /* 685 */ 's', 'e', 't', 'n', 'o', 9, 0,
  /* 692 */ 'c', 'm', 'o', 'v', 'n', 'o', 9, 0,
  /* 700 */ 's', 'e', 't', 'o', 9, 0,
  /* 706 */ 'c', 'm', 'o', 'v', 'o', 9, 0,
  /* 713 */ 'b', 's', 'w', 'a', 'p', 9, 0,
  /* 720 */ 'j', 'p', 9, 0,
  /* 724 */ 'c', 'm', 'p', 9, 0,
  /* 729 */ 'r', 'e', 'x', '6', '4', 32, 'j', 'm', 'p', 9, 0,
  /* 740 */ 'l', 'j', 'm', 'p', 9, 0,
  /* 746 */ 'j', 'n', 'p', 9, 0,
  /* 751 */ 's', 'e', 't', 'n', 'p', 9, 0,
  /* 758 */ 'c', 'm', 'o', 'v', 'n', 'p', 9, 0,
  /* 766 */ 'n', 'o', 'p', 9, 0,
  /* 771 */ 'l', 'o', 'o', 'p', 9, 0,
  /* 777 */ 'p', 'o', 'p', 9, 0,
  /* 782 */ 'r', 's', 't', 'o', 'r', 's', 's', 'p', 9, 0,
  /* 792 */ 's', 'e', 't', 'p', 9, 0,
  /* 798 */ 'c', 'm', 'o', 'v', 'p', 9, 0,
  /* 805 */ 'r', 'e', 't', 'f', 'q', 9, 0,
  /* 812 */ 'i', 'n', 'c', 's', 's', 'p', 'q', 9, 0,
  /* 821 */ 'r', 'd', 's', 's', 'p', 'q', 9, 0,
  /* 829 */ 's', 't', 'o', 's', 'q', 9, 0,
  /* 836 */ 'c', 'm', 'p', 's', 'q', 9, 0,
  /* 843 */ 'w', 'r', 's', 's', 'q', 9, 0,
  /* 850 */ 'w', 'r', 'u', 's', 's', 'q', 9, 0,
  /* 858 */ 'm', 'o', 'v', 's', 'q', 9, 0,
  /* 865 */ 'v', 'm', 'c', 'l', 'e', 'a', 'r', 9, 0,
  /* 874 */ 'l', 'a', 'r', 9, 0,
  /* 879 */ 's', 'a', 'r', 9, 0,
  /* 884 */ 'r', 'c', 'r', 9, 0,
  /* 889 */ 'e', 'n', 't', 'e', 'r', 9, 0,
  /* 896 */ 's', 'h', 'r', 9, 0,
  /* 901 */ 'r', 'o', 'r', 9, 0,
  /* 906 */ 'x', 'r', 's', 't', 'o', 'r', 9, 0,
  /* 914 */ 'x', 'o', 'r', 9, 0,
  /* 919 */ 'v', 'e', 'r', 'r', 9, 0,
  /* 925 */ 'b', 's', 'r', 9, 0,
  /* 930 */ 'b', 't', 'r', 9, 0,
  /* 935 */ 'l', 't', 'r', 9, 0,
  /* 940 */ 's', 't', 'r', 9, 0,
  /* 945 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 0,
  /* 953 */ 'l', 'd', 's', 9, 0,
  /* 958 */ 'l', 'e', 's', 9, 0,
  /* 963 */ 'x', 's', 'a', 'v', 'e', 's', 9, 0,
  /* 971 */ 'l', 'f', 's', 9, 0,
  /* 976 */ 'l', 'g', 's', 9, 0,
  /* 981 */ 'j', 's', 9, 0,
  /* 985 */ 'j', 'n', 's', 9, 0,
  /* 990 */ 's', 'e', 't', 'n', 's', 9, 0,
  /* 997 */ 'c', 'm', 'o', 'v', 'n', 's', 9, 0,
  /* 1005 */ 'x', 'r', 's', 't', 'o', 'r', 's', 9, 0,
  /* 1014 */ 'l', 's', 's', 9, 0,
  /* 1019 */ 'b', 't', 's', 9, 0,
  /* 1024 */ 's', 'e', 't', 's', 9, 0,
  /* 1030 */ 'c', 'm', 'o', 'v', 's', 9, 0,
  /* 1037 */ 'b', 't', 9, 0,
  /* 1041 */ 'l', 'g', 'd', 't', 9, 0,
  /* 1047 */ 's', 'g', 'd', 't', 9, 0,
  /* 1053 */ 'l', 'i', 'd', 't', 9, 0,
  /* 1059 */ 's', 'i', 'd', 't', 9, 0,
  /* 1065 */ 'l', 'l', 'd', 't', 9, 0,
  /* 1071 */ 's', 'l', 'd', 't', 9, 0,
  /* 1077 */ 'r', 'e', 't', 9, 0,
  /* 1082 */ 'i', 'n', 't', 9, 0,
  /* 1087 */ 'n', 'o', 't', 9, 0,
  /* 1092 */ 'i', 'n', 'v', 'e', 'p', 't', 9, 0,
  /* 1100 */ 'x', 's', 'a', 'v', 'e', 'o', 'p', 't', 9, 0,
  /* 1110 */ 't', 'e', 's', 't', 9, 0,
  /* 1116 */ 'v', 'm', 'p', 't', 'r', 's', 't', 9, 0,
  /* 1125 */ 'o', 'u', 't', 9, 0,
  /* 1130 */ 'i', 'd', 'i', 'v', 9, 0,
  /* 1136 */ 'm', 'o', 'v', 9, 0,
  /* 1141 */ 'v', 'e', 'r', 'w', 9, 0,
  /* 1147 */ 'l', 'm', 's', 'w', 9, 0,
  /* 1153 */ 's', 'm', 's', 'w', 9, 0,
  /* 1159 */ 'i', 'n', 's', 'w', 9, 0,
  /* 1165 */ 's', 't', 'o', 's', 'w', 9, 0,
  /* 1172 */ 'c', 'm', 'p', 's', 'w', 9, 0,
  /* 1179 */ 'm', 'o', 'v', 's', 'w', 9, 0,
  /* 1186 */ 'a', 'd', 'c', 'x', 9, 0,
  /* 1192 */ 's', 'h', 'l', 'x', 9, 0,
  /* 1198 */ 'm', 'u', 'l', 'x', 9, 0,
  /* 1204 */ 'a', 'd', 'o', 'x', 9, 0,
  /* 1210 */ 's', 'a', 'r', 'x', 9, 0,
  /* 1216 */ 's', 'h', 'r', 'x', 9, 0,
  /* 1222 */ 'r', 'o', 'r', 'x', 9, 0,
  /* 1228 */ 'm', 'o', 'v', 's', 'x', 9, 0,
  /* 1235 */ 'm', 'o', 'v', 'z', 'x', 9, 0,
  /* 1242 */ 'c', 'l', 'r', 's', 's', 'b', 's', 'y', 9, 0,
  /* 1252 */ 'j', 'e', 'c', 'x', 'z', 9, 0,
  /* 1259 */ 'j', 'c', 'x', 'z', 9, 0,
  /* 1265 */ 'j', 'r', 'c', 'x', 'z', 9, 0,
  /* 1272 */ 's', 'b', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1281 */ 's', 'c', 'a', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1292 */ 'l', 'o', 'd', 's', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1303 */ 's', 'u', 'b', 9, 'a', 'l', ',', 32, 0,
  /* 1312 */ 'a', 'd', 'c', 9, 'a', 'l', ',', 32, 0,
  /* 1321 */ 'a', 'd', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1330 */ 'a', 'n', 'd', 9, 'a', 'l', ',', 32, 0,
  /* 1339 */ 'i', 'n', 9, 'a', 'l', ',', 32, 0,
  /* 1347 */ 'c', 'm', 'p', 9, 'a', 'l', ',', 32, 0,
  /* 1356 */ 'x', 'o', 'r', 9, 'a', 'l', ',', 32, 0,
  /* 1365 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'l', ',', 32, 0,
  /* 1377 */ 't', 'e', 's', 't', 9, 'a', 'l', ',', 32, 0,
  /* 1387 */ 'm', 'o', 'v', 9, 'a', 'l', ',', 32, 0,
  /* 1396 */ 's', 'b', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1405 */ 's', 'u', 'b', 9, 'a', 'x', ',', 32, 0,
  /* 1414 */ 'a', 'd', 'c', 9, 'a', 'x', ',', 32, 0,
  /* 1423 */ 'a', 'd', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1432 */ 'a', 'n', 'd', 9, 'a', 'x', ',', 32, 0,
  /* 1441 */ 'i', 'n', 9, 'a', 'x', ',', 32, 0,
  /* 1449 */ 'c', 'm', 'p', 9, 'a', 'x', ',', 32, 0,
  /* 1458 */ 'x', 'o', 'r', 9, 'a', 'x', ',', 32, 0,
  /* 1467 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'a', 'x', ',', 32, 0,
  /* 1479 */ 't', 'e', 's', 't', 9, 'a', 'x', ',', 32, 0,
  /* 1489 */ 'm', 'o', 'v', 9, 'a', 'x', ',', 32, 0,
  /* 1498 */ 's', 'c', 'a', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1509 */ 'l', 'o', 'd', 's', 'w', 9, 'a', 'x', ',', 32, 0,
  /* 1520 */ 's', 'b', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1530 */ 's', 'u', 'b', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1540 */ 'a', 'd', 'c', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1550 */ 'a', 'd', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1560 */ 'a', 'n', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1570 */ 's', 'c', 'a', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1582 */ 'l', 'o', 'd', 's', 'd', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1594 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1603 */ 'c', 'm', 'p', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1613 */ 'x', 'o', 'r', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1623 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1636 */ 't', 'e', 's', 't', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1647 */ 'm', 'o', 'v', 9, 'e', 'a', 'x', ',', 32, 0,
  /* 1657 */ 's', 'b', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1667 */ 's', 'u', 'b', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1677 */ 'a', 'd', 'c', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1687 */ 'a', 'd', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1697 */ 'a', 'n', 'd', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1707 */ 'c', 'm', 'p', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1717 */ 's', 'c', 'a', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1729 */ 'l', 'o', 'd', 's', 'q', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1741 */ 'x', 'o', 'r', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1751 */ 'm', 'o', 'v', 'a', 'b', 's', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1764 */ 't', 'e', 's', 't', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1775 */ 'm', 'o', 'v', 9, 'r', 'a', 'x', ',', 32, 0,
  /* 1785 */ 'o', 'u', 't', 's', 'b', 9, 'd', 'x', ',', 32, 0,
  /* 1796 */ 'o', 'u', 't', 's', 'd', 9, 'd', 'x', ',', 32, 0,
  /* 1807 */ 'o', 'u', 't', 's', 'w', 9, 'd', 'x', ',', 32, 0,
  /* 1818 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 1849 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 1873 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 1898 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 1921 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 1944 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 1966 */ 'u', 'd', '0', 0,
  /* 1970 */ 'x', 's', 'h', 'a', '1', 0,
  /* 1976 */ 'u', 'd', '1', 0,
  /* 1980 */ 'i', 'n', 't', '1', 0,
  /* 1985 */ 'e', 'n', 'd', 'b', 'r', '3', '2', 0,
  /* 1993 */ 'u', 'd', '2', 0,
  /* 1997 */ 'i', 'n', 't', '3', 0,
  /* 2002 */ 'e', 'n', 'd', 'b', 'r', '6', '4', 0,
  /* 2010 */ 'r', 'e', 'x', '6', '4', 0,
  /* 2016 */ 'd', 'a', 't', 'a', '1', '6', 0,
  /* 2023 */ 'x', 's', 'h', 'a', '2', '5', '6', 0,
  /* 2031 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2044 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2051 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2061 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2071 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2086 */ 'a', 'a', 'a', 0,
  /* 2090 */ 'd', 'a', 'a', 0,
  /* 2094 */ 'x', 'c', 'r', 'y', 'p', 't', 'e', 'c', 'b', 0,
  /* 2104 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'f', 'b', 0,
  /* 2114 */ 'x', 'c', 'r', 'y', 'p', 't', 'o', 'f', 'b', 0,
  /* 2124 */ 'x', 'l', 'a', 't', 'b', 0,
  /* 2130 */ 'c', 'l', 'a', 'c', 0,
  /* 2135 */ 's', 't', 'a', 'c', 0,
  /* 2140 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 'b', 'c', 0,
  /* 2150 */ 'g', 'e', 't', 's', 'e', 'c', 0,
  /* 2157 */ 's', 'a', 'l', 'c', 0,
  /* 2162 */ 'c', 'l', 'c', 0,
  /* 2166 */ 'c', 'm', 'c', 0,
  /* 2170 */ 'r', 'd', 'p', 'm', 'c', 0,
  /* 2176 */ 'v', 'm', 'f', 'u', 'n', 'c', 0,
  /* 2183 */ 'r', 'd', 't', 's', 'c', 0,
  /* 2189 */ 's', 't', 'c', 0,
  /* 2193 */ 'p', 'u', 's', 'h', 'f', 'd', 0,
  /* 2200 */ 'p', 'o', 'p', 'f', 'd', 0,
  /* 2206 */ 'c', 'p', 'u', 'i', 'd', 0,
  /* 2212 */ 'c', 'l', 'd', 0,
  /* 2216 */ 'i', 'r', 'e', 't', 'd', 0,
  /* 2222 */ 's', 't', 'd', 0,
  /* 2226 */ 'w', 'b', 'i', 'n', 'v', 'd', 0,
  /* 2233 */ 'w', 'b', 'n', 'o', 'i', 'n', 'v', 'd', 0,
  /* 2242 */ 'c', 'w', 'd', 0,
  /* 2246 */ 'c', 'w', 'd', 'e', 0,
  /* 2251 */ 'v', 'm', 'r', 'e', 's', 'u', 'm', 'e', 0,
  /* 2260 */ 'r', 'e', 'p', 'n', 'e', 0,
  /* 2266 */ 'c', 'd', 'q', 'e', 0,
  /* 2271 */ 'x', 's', 't', 'o', 'r', 'e', 0,
  /* 2278 */ 'l', 'e', 'a', 'v', 'e', 0,
  /* 2284 */ 'v', 'm', 'x', 'o', 'f', 'f', 0,
  /* 2291 */ 'l', 'a', 'h', 'f', 0,
  /* 2296 */ 's', 'a', 'h', 'f', 0,
  /* 2301 */ 'p', 'u', 's', 'h', 'f', 0,
  /* 2307 */ 'p', 'o', 'p', 'f', 0,
  /* 2312 */ 'r', 'e', 't', 'f', 0,
  /* 2317 */ 'p', 'c', 'o', 'n', 'f', 'i', 'g', 0,
  /* 2325 */ 'v', 'm', 'l', 'a', 'u', 'n', 'c', 'h', 0,
  /* 2334 */ 'c', 'l', 'g', 'i', 0,
  /* 2339 */ 's', 't', 'g', 'i', 0,
  /* 2344 */ 'c', 'l', 'i', 0,
  /* 2348 */ 's', 't', 'i', 0,
  /* 2352 */ 'l', 'o', 'c', 'k', 0,
  /* 2357 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'l', 0,
  /* 2368 */ 'p', 'u', 's', 'h', 'a', 'l', 0,
  /* 2375 */ 'p', 'o', 'p', 'a', 'l', 0,
  /* 2381 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 2395 */ 'v', 'm', 'm', 'c', 'a', 'l', 'l', 0,
  /* 2403 */ 'v', 'm', 'c', 'a', 'l', 'l', 0,
  /* 2410 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 0,
  /* 2418 */ 'm', 'o', 'n', 't', 'm', 'u', 'l', 0,
  /* 2426 */ 'f', 's', 'e', 't', 'p', 'm', 0,
  /* 2433 */ 'r', 's', 'm', 0,
  /* 2437 */ 'c', 'q', 'o', 0,
  /* 2441 */ 'i', 'n', 't', 'o', 0,
  /* 2446 */ 'r', 'd', 't', 's', 'c', 'p', 0,
  /* 2453 */ 'r', 'e', 'p', 0,
  /* 2457 */ 'n', 'o', 'p', 0,
  /* 2461 */ 's', 'a', 'v', 'e', 'p', 'r', 'e', 'v', 's', 's', 'p', 0,
  /* 2473 */ 'c', 'd', 'q', 0,
  /* 2477 */ 'p', 'u', 's', 'h', 'f', 'q', 0,
  /* 2484 */ 'p', 'o', 'p', 'f', 'q', 0,
  /* 2490 */ 'r', 'e', 't', 'f', 'q', 0,
  /* 2496 */ 'i', 'r', 'e', 't', 'q', 0,
  /* 2502 */ 's', 'y', 's', 'r', 'e', 't', 'q', 0,
  /* 2510 */ 's', 'y', 's', 'e', 'x', 'i', 't', 'q', 0,
  /* 2519 */ 's', 'y', 's', 'e', 'n', 't', 'e', 'r', 0,
  /* 2528 */ 'r', 'd', 'm', 's', 'r', 0,
  /* 2534 */ 'w', 'r', 'm', 's', 'r', 0,
  /* 2540 */ 'x', 'c', 'r', 'y', 'p', 't', 'c', 't', 'r', 0,
  /* 2550 */ 'a', 'a', 's', 0,
  /* 2554 */ 'd', 'a', 's', 0,
  /* 2558 */ 'p', 'u', 's', 'h', 9, 'c', 's', 0,
  /* 2566 */ 'p', 'u', 's', 'h', 9, 'd', 's', 0,
  /* 2574 */ 'p', 'o', 'p', 9, 'd', 's', 0,
  /* 2581 */ 'p', 'u', 's', 'h', 9, 'e', 's', 0,
  /* 2589 */ 'p', 'o', 'p', 9, 'e', 's', 0,
  /* 2596 */ 'p', 'u', 's', 'h', 9, 'f', 's', 0,
  /* 2604 */ 'p', 'o', 'p', 9, 'f', 's', 0,
  /* 2611 */ 'p', 'u', 's', 'h', 9, 'g', 's', 0,
  /* 2619 */ 'p', 'o', 'p', 9, 'g', 's', 0,
  /* 2626 */ 's', 'w', 'a', 'p', 'g', 's', 0,
  /* 2633 */ 'p', 'u', 's', 'h', 9, 's', 's', 0,
  /* 2641 */ 'p', 'o', 'p', 9, 's', 's', 0,
  /* 2648 */ 'c', 'l', 't', 's', 0,
  /* 2653 */ 'i', 'r', 'e', 't', 0,
  /* 2658 */ 's', 'y', 's', 'r', 'e', 't', 0,
  /* 2665 */ 's', 'y', 's', 'e', 'x', 'i', 't', 0,
  /* 2673 */ 'h', 'l', 't', 0,
  /* 2677 */ 'r', 'd', 'p', 'k', 'r', 'u', 0,
  /* 2684 */ 'w', 'r', 'p', 'k', 'r', 'u', 0,
  /* 2691 */ 'x', 'g', 'e', 't', 'b', 'v', 0,
  /* 2698 */ 'x', 's', 'e', 't', 'b', 'v', 0,
  /* 2705 */ 'p', 'u', 's', 'h', 'a', 'w', 0,
  /* 2712 */ 'p', 'o', 'p', 'a', 'w', 0,
  /* 2718 */ 'c', 'b', 'w', 0,
  /* 2722 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'a', 'x', 0,
  /* 2733 */ 'v', 'm', 'l', 'o', 'a', 'd', 9, 'e', 'a', 'x', 0,
  /* 2744 */ 'v', 'm', 's', 'a', 'v', 'e', 9, 'e', 'a', 'x', 0,
  /* 2755 */ 'v', 'm', 'r', 'u', 'n', 9, 'e', 'a', 'x', 0,
  /* 2765 */ 's', 'k', 'i', 'n', 'i', 't', 9, 'e', 'a', 'x', 0,
  /* 2776 */ 'o', 'u', 't', 9, 'd', 'x', ',', 32, 'e', 'a', 'x', 0,
  /* 2788 */ 'v', 'm', 'l', 'o', 'a', 'd', 9, 'r', 'a', 'x', 0,
  /* 2799 */ 'v', 'm', 's', 'a', 'v', 'e', 9, 'r', 'a', 'x', 0,
  /* 2810 */ 'v', 'm', 'r', 'u', 'n', 9, 'r', 'a', 'x', 0,
  /* 2820 */ 'i', 'n', 'v', 'l', 'p', 'g', 'a', 9, 'e', 'a', 'x', ',', 32, 'e', 'c', 'x', 0,
  /* 2837 */ 'i', 'n', 'v', 'l', 'p', 'g', 'a', 9, 'r', 'a', 'x', ',', 32, 'e', 'c', 'x', 0,
  /* 2854 */ 'i', 'n', 9, 'a', 'l', ',', 32, 'd', 'x', 0,
  /* 2864 */ 'i', 'n', 9, 'a', 'x', ',', 32, 'd', 'x', 0,
  /* 2874 */ 'i', 'n', 9, 'e', 'a', 'x', ',', 32, 'd', 'x', 0,
  /* 2885 */ 'm', 'o', 'n', 'i', 't', 'o', 'r', 'x', 0,
  /* 2894 */ 'm', 'w', 'a', 'i', 't', 'x', 0,
  /* 2901 */ 's', 'e', 't', 's', 's', 'b', 's', 'y', 0,
  };
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2052U,	// DBG_VALUE
    2062U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2045U,	// BUNDLE
    2072U,	// LIFETIME_START
    2032U,	// LIFETIME_END
    0U,	// STACKMAP
    2382U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    1899U,	// PATCHABLE_FUNCTION_ENTER
    1819U,	// PATCHABLE_RET
    1945U,	// PATCHABLE_FUNCTION_EXIT
    1922U,	// PATCHABLE_TAIL_CALL
    1874U,	// PATCHABLE_EVENT_CALL
    1850U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// RETPOLINE_CALL32
    0U,	// RETPOLINE_CALL64
    0U,	// RETPOLINE_TCRETURN32
    0U,	// RETPOLINE_TCRETURN64
    2087U,	// AAA
    4286U,	// AAD8i8
    4755U,	// AAM8i8
    2551U,	// AAS
    5511U,	// ADC16i16
    270498U,	// ADC16mi
    270498U,	// ADC16mi8
    270498U,	// ADC16mr
    4468898U,	// ADC16ri
    4468898U,	// ADC16ri8
    8663202U,	// ADC16rm
    4468898U,	// ADC16rr
    4460706U,	// ADC16rr_REV
    5637U,	// ADC32i32
    278690U,	// ADC32mi
    278690U,	// ADC32mi8
    278690U,	// ADC32mr
    4468898U,	// ADC32ri
    4468898U,	// ADC32ri8
    12857506U,	// ADC32rm
    4468898U,	// ADC32rr
    4460706U,	// ADC32rr_REV
    5774U,	// ADC64i32
    282786U,	// ADC64mi32
    282786U,	// ADC64mi8
    282786U,	// ADC64mr
    4468898U,	// ADC64ri32
    4468898U,	// ADC64ri8
    17051810U,	// ADC64rm
    4468898U,	// ADC64rr
    4460706U,	// ADC64rr_REV
    5409U,	// ADC8i8
    286882U,	// ADC8mi
    286882U,	// ADC8mi8
    286882U,	// ADC8mr
    4468898U,	// ADC8ri
    4468898U,	// ADC8ri8
    21246114U,	// ADC8rm
    4468898U,	// ADC8rr
    4460706U,	// ADC8rr_REV
    12850339U,	// ADCX32rm
    4461731U,	// ADCX32rr
    17044643U,	// ADCX64rm
    4461731U,	// ADCX64rr
    5520U,	// ADD16i16
    270540U,	// ADD16mi
    270540U,	// ADD16mi8
    270540U,	// ADD16mr
    4468940U,	// ADD16ri
    4468940U,	// ADD16ri8
    8663244U,	// ADD16rm
    4468940U,	// ADD16rr
    4460748U,	// ADD16rr_REV
    5647U,	// ADD32i32
    278732U,	// ADD32mi
    278732U,	// ADD32mi8
    278732U,	// ADD32mr
    4468940U,	// ADD32ri
    4468940U,	// ADD32ri8
    12857548U,	// ADD32rm
    4468940U,	// ADD32rr
    4460748U,	// ADD32rr_REV
    5784U,	// ADD64i32
    282828U,	// ADD64mi32
    282828U,	// ADD64mi8
    282828U,	// ADD64mr
    4468940U,	// ADD64ri32
    4468940U,	// ADD64ri8
    17051852U,	// ADD64rm
    4468940U,	// ADD64rr
    4460748U,	// ADD64rr_REV
    5418U,	// ADD8i8
    286924U,	// ADD8mi
    286924U,	// ADD8mi8
    286924U,	// ADD8mr
    4468940U,	// ADD8ri
    4468940U,	// ADD8ri8
    21246156U,	// ADD8rm
    4468940U,	// ADD8rr
    4460748U,	// ADD8rr_REV
    12850357U,	// ADOX32rm
    4461749U,	// ADOX32rr
    17044661U,	// ADOX64rm
    4461749U,	// ADOX64rr
    5529U,	// AND16i16
    270596U,	// AND16mi
    270596U,	// AND16mi8
    270596U,	// AND16mr
    4468996U,	// AND16ri
    4468996U,	// AND16ri8
    8663300U,	// AND16rm
    4468996U,	// AND16rr
    4460804U,	// AND16rr_REV
    5657U,	// AND32i32
    278788U,	// AND32mi
    278788U,	// AND32mi8
    278788U,	// AND32mr
    4468996U,	// AND32ri
    4468996U,	// AND32ri8
    12857604U,	// AND32rm
    4468996U,	// AND32rr
    4460804U,	// AND32rr_REV
    5794U,	// AND64i32
    282884U,	// AND64mi32
    282884U,	// AND64mi8
    282884U,	// AND64mr
    4468996U,	// AND64ri32
    4468996U,	// AND64ri8
    17051908U,	// AND64rm
    4468996U,	// AND64rr
    4460804U,	// AND64rr_REV
    5427U,	// AND8i8
    286980U,	// AND8mi
    286980U,	// AND8mi8
    286980U,	// AND8mr
    4468996U,	// AND8ri
    4468996U,	// AND8ri8
    21246212U,	// AND8rm
    4468996U,	// AND8rr
    4460804U,	// AND8rr_REV
    159650456U,	// ANDN32rm
    696521368U,	// ANDN32rr
    1233392280U,	// ANDN64rm
    696521368U,	// ANDN64rr
    270965U,	// ARPL16mr
    25432693U,	// ARPL16rr
    29626633U,	// BOUNDS16rm
    33820937U,	// BOUNDS32rm
    38015518U,	// BSF16rm
    25432606U,	// BSF16rr
    29626910U,	// BSF32rm
    25432606U,	// BSF32rr
    33821214U,	// BSF64rm
    25432606U,	// BSF64rr
    38015902U,	// BSR16rm
    25432990U,	// BSR16rr
    29627294U,	// BSR32rm
    25432990U,	// BSR32rr
    33821598U,	// BSR64rm
    25432990U,	// BSR64rr
    4810U,	// BSWAP16r_BAD
    4810U,	// BSWAP32r
    4810U,	// BSWAP64r
    271374U,	// BT16mi8
    271374U,	// BT16mr
    25433102U,	// BT16ri8
    25433102U,	// BT16rr
    279566U,	// BT32mi8
    279566U,	// BT32mr
    25433102U,	// BT32ri8
    25433102U,	// BT32rr
    283662U,	// BT64mi8
    283662U,	// BT64mr
    25433102U,	// BT64ri8
    25433102U,	// BT64rr
    270521U,	// BTC16mi8
    270521U,	// BTC16mr
    4468921U,	// BTC16ri8
    4468921U,	// BTC16rr
    278713U,	// BTC32mi8
    278713U,	// BTC32mr
    4468921U,	// BTC32ri8
    4468921U,	// BTC32rr
    282809U,	// BTC64mi8
    282809U,	// BTC64mr
    4468921U,	// BTC64ri8
    4468921U,	// BTC64rr
    271267U,	// BTR16mi8
    271267U,	// BTR16mr
    4469667U,	// BTR16ri8
    4469667U,	// BTR16rr
    279459U,	// BTR32mi8
    279459U,	// BTR32mr
    4469667U,	// BTR32ri8
    4469667U,	// BTR32rr
    283555U,	// BTR64mi8
    283555U,	// BTR64mr
    4469667U,	// BTR64ri8
    4469667U,	// BTR64rr
    271356U,	// BTS16mi8
    271356U,	// BTS16mr
    4469756U,	// BTS16ri8
    4469756U,	// BTS16rr
    279548U,	// BTS32mi8
    279548U,	// BTS32mr
    4469756U,	// BTS32ri8
    4469756U,	// BTS32rr
    283644U,	// BTS64mi8
    283644U,	// BTS64mr
    4469756U,	// BTS64ri8
    4469756U,	// BTS64rr
    8810U,	// CALL16m
    8810U,	// CALL16m_NT
    4714U,	// CALL16r
    4714U,	// CALL16r_NT
    17002U,	// CALL32m
    17002U,	// CALL32m_NT
    4714U,	// CALL32r
    4714U,	// CALL32r_NT
    21098U,	// CALL64m
    21098U,	// CALL64m_NT
    29290U,	// CALL64pcrel32
    4714U,	// CALL64r
    4714U,	// CALL64r_NT
    29290U,	// CALLpcrel16
    29290U,	// CALLpcrel32
    2719U,	// CBW
    2474U,	// CDQ
    2267U,	// CDQE
    2131U,	// CLAC
    2163U,	// CLC
    2213U,	// CLD
    2335U,	// CLGI
    2345U,	// CLI
    17627U,	// CLRSSBSY
    2649U,	// CLTS
    2167U,	// CMC
    8654926U,	// CMOVA16rm
    4460622U,	// CMOVA16rr
    12849230U,	// CMOVA32rm
    4460622U,	// CMOVA32rr
    17043534U,	// CMOVA64rm
    4460622U,	// CMOVA64rr
    8655205U,	// CMOVAE16rm
    4460901U,	// CMOVAE16rr
    12849509U,	// CMOVAE32rm
    4460901U,	// CMOVAE32rr
    17043813U,	// CMOVAE64rm
    4460901U,	// CMOVAE64rr
    8655003U,	// CMOVB16rm
    4460699U,	// CMOVB16rr
    12849307U,	// CMOVB32rm
    4460699U,	// CMOVB32rr
    17043611U,	// CMOVB64rm
    4460699U,	// CMOVB64rr
    8655225U,	// CMOVBE16rm
    4460921U,	// CMOVBE16rr
    12849529U,	// CMOVBE32rm
    4460921U,	// CMOVBE32rr
    17043833U,	// CMOVBE64rm
    4460921U,	// CMOVBE64rr
    8655383U,	// CMOVE16rm
    4461079U,	// CMOVE16rr
    12849687U,	// CMOVE32rm
    4461079U,	// CMOVE32rr
    17043991U,	// CMOVE64rm
    4461079U,	// CMOVE64rr
    8655433U,	// CMOVG16rm
    4461129U,	// CMOVG16rr
    12849737U,	// CMOVG32rm
    4461129U,	// CMOVG32rr
    17044041U,	// CMOVG64rm
    4461129U,	// CMOVG64rr
    8655245U,	// CMOVGE16rm
    4460941U,	// CMOVGE16rr
    12849549U,	// CMOVGE32rm
    4460941U,	// CMOVGE32rr
    17043853U,	// CMOVGE64rm
    4460941U,	// CMOVGE64rr
    8655500U,	// CMOVL16rm
    4461196U,	// CMOVL16rr
    12849804U,	// CMOVL32rm
    4461196U,	// CMOVL32rr
    17044108U,	// CMOVL64rm
    4461196U,	// CMOVL64rr
    8655269U,	// CMOVLE16rm
    4460965U,	// CMOVLE16rr
    12849573U,	// CMOVLE32rm
    4460965U,	// CMOVLE32rr
    17043877U,	// CMOVLE64rm
    4460965U,	// CMOVLE64rr
    8655297U,	// CMOVNE16rm
    4460993U,	// CMOVNE16rr
    12849601U,	// CMOVNE32rm
    4460993U,	// CMOVNE32rr
    17043905U,	// CMOVNE64rm
    4460993U,	// CMOVNE64rr
    8655541U,	// CMOVNO16rm
    4461237U,	// CMOVNO16rr
    12849845U,	// CMOVNO32rm
    4461237U,	// CMOVNO32rr
    17044149U,	// CMOVNO64rm
    4461237U,	// CMOVNO64rr
    8655607U,	// CMOVNP16rm
    4461303U,	// CMOVNP16rr
    12849911U,	// CMOVNP32rm
    4461303U,	// CMOVNP32rr
    17044215U,	// CMOVNP64rm
    4461303U,	// CMOVNP64rr
    8655846U,	// CMOVNS16rm
    4461542U,	// CMOVNS16rr
    12850150U,	// CMOVNS32rm
    4461542U,	// CMOVNS32rr
    17044454U,	// CMOVNS64rm
    4461542U,	// CMOVNS64rr
    8655555U,	// CMOVO16rm
    4461251U,	// CMOVO16rr
    12849859U,	// CMOVO32rm
    4461251U,	// CMOVO32rr
    17044163U,	// CMOVO64rm
    4461251U,	// CMOVO64rr
    8655647U,	// CMOVP16rm
    4461343U,	// CMOVP16rr
    12849951U,	// CMOVP32rm
    4461343U,	// CMOVP32rr
    17044255U,	// CMOVP64rm
    4461343U,	// CMOVP64rr
    8655879U,	// CMOVS16rm
    4461575U,	// CMOVS16rr
    12850183U,	// CMOVS32rm
    4461575U,	// CMOVS32rr
    17044487U,	// CMOVS64rm
    4461575U,	// CMOVS64rr
    5546U,	// CMP16i16
    271061U,	// CMP16mi
    271061U,	// CMP16mi8
    271061U,	// CMP16mr
    25432789U,	// CMP16ri
    25432789U,	// CMP16ri8
    38015701U,	// CMP16rm
    25432789U,	// CMP16rr
    25432789U,	// CMP16rr_REV
    5700U,	// CMP32i32
    279253U,	// CMP32mi
    279253U,	// CMP32mi8
    279253U,	// CMP32mr
    25432789U,	// CMP32ri
    25432789U,	// CMP32ri8
    29627093U,	// CMP32rm
    25432789U,	// CMP32rr
    25432789U,	// CMP32rr_REV
    5804U,	// CMP64i32
    283349U,	// CMP64mi32
    283349U,	// CMP64mi8
    283349U,	// CMP64mr
    25432789U,	// CMP64ri32
    25432789U,	// CMP64ri8
    33821397U,	// CMP64rm
    25432789U,	// CMP64rr
    25432789U,	// CMP64rr_REV
    5444U,	// CMP8i8
    287445U,	// CMP8mi
    287445U,	// CMP8mi8
    287445U,	// CMP8mr
    25432789U,	// CMP8ri
    25432789U,	// CMP8ri8
    42210005U,	// CMP8rm
    25432789U,	// CMP8rr
    25432789U,	// CMP8rr_REV
    32898U,	// CMPSB
    37172U,	// CMPSL
    41797U,	// CMPSQ
    46229U,	// CMPSW
    49237U,	// CMPXCHG16B
    270894U,	// CMPXCHG16rm
    25432622U,	// CMPXCHG16rr
    279086U,	// CMPXCHG32rm
    25432622U,	// CMPXCHG32rr
    283182U,	// CMPXCHG64rm
    25432622U,	// CMPXCHG64rr
    20577U,	// CMPXCHG8B
    287278U,	// CMPXCHG8rm
    25432622U,	// CMPXCHG8rr
    2207U,	// CPUID
    2438U,	// CQO
    2243U,	// CWD
    2247U,	// CWDE
    2091U,	// DAA
    2555U,	// DAS
    2017U,	// DATA16_PREFIX
    8359U,	// DEC16m
    4263U,	// DEC16r
    4263U,	// DEC16r_alt
    16551U,	// DEC32m
    4263U,	// DEC32r
    4263U,	// DEC32r_alt
    20647U,	// DEC64m
    4263U,	// DEC64r
    24743U,	// DEC8m
    4263U,	// DEC8r
    9324U,	// DIV16m
    5228U,	// DIV16r
    17516U,	// DIV32m
    5228U,	// DIV32r
    21612U,	// DIV64m
    5228U,	// DIV64r
    25708U,	// DIV8m
    5228U,	// DIV8r
    1986U,	// ENDBR32
    2003U,	// ENDBR64
    25432954U,	// ENTER
    46412393U,	// FARCALL16i
    53865U,	// FARCALL16m
    46412393U,	// FARCALL32i
    53866U,	// FARCALL32m
    53865U,	// FARCALL64
    537317U,	// FARJMP16i
    53989U,	// FARJMP16m
    537317U,	// FARJMP32i
    53984U,	// FARJMP32m
    53989U,	// FARJMP64
    2427U,	// FSETPM
    2151U,	// GETSEC
    2674U,	// HLT
    9323U,	// IDIV16m
    5227U,	// IDIV16r
    17515U,	// IDIV32m
    5227U,	// IDIV32r
    21611U,	// IDIV64m
    5227U,	// IDIV64r
    25707U,	// IDIV8m
    5227U,	// IDIV8r
    8838U,	// IMUL16m
    4742U,	// IMUL16r
    8655494U,	// IMUL16rm
    1782846086U,	// IMUL16rmi
    1782846086U,	// IMUL16rmi8
    4461190U,	// IMUL16rr
    696521350U,	// IMUL16rri
    696521350U,	// IMUL16rri8
    17030U,	// IMUL32m
    4742U,	// IMUL32r
    12849798U,	// IMUL32rm
    1774457478U,	// IMUL32rmi
    1774457478U,	// IMUL32rmi8
    4461190U,	// IMUL32rr
    696521350U,	// IMUL32rri
    696521350U,	// IMUL32rri8
    21126U,	// IMUL64m
    4742U,	// IMUL64r
    17044102U,	// IMUL64rm
    1778651782U,	// IMUL64rmi32
    1778651782U,	// IMUL64rmi8
    4461190U,	// IMUL64rr
    696521350U,	// IMUL64rri32
    696521350U,	// IMUL64rri8
    25222U,	// IMUL8m
    4742U,	// IMUL8r
    58786U,	// IN16ri
    2865U,	// IN16rr
    58939U,	// IN32ri
    2875U,	// IN32rr
    58684U,	// IN8ri
    2855U,	// IN8rr
    8372U,	// INC16m
    4276U,	// INC16r
    4276U,	// INC16r_alt
    16564U,	// INC32m
    4276U,	// INC32r
    4276U,	// INC32r_alt
    20660U,	// INC64m
    4276U,	// INC64r
    24756U,	// INC8m
    4276U,	// INC8r
    4368U,	// INCSSPD
    4909U,	// INCSSPQ
    847989U,	// INSB
    852263U,	// INSL
    857224U,	// INSW
    58427U,	// INT
    1981U,	// INT1
    1998U,	// INT3
    2442U,	// INTO
    2229U,	// INVD
    50598981U,	// INVEPT32
    50598981U,	// INVEPT64
    25147U,	// INVLPG
    2821U,	// INVLPGA32
    2838U,	// INVLPGA64
    50598105U,	// INVPCID32
    50598105U,	// INVPCID64
    50598121U,	// INVVPID32
    50598121U,	// INVVPID64
    0U,	// IRET
    2654U,	// IRET16
    2217U,	// IRET32
    2497U,	// IRET64
    0U,	// Int_eh_sjlj_setup_dispatch
    29017U,	// JAE_1
    29017U,	// JAE_2
    29017U,	// JAE_4
    28740U,	// JA_1
    28740U,	// JA_2
    28740U,	// JA_4
    29037U,	// JBE_1
    29037U,	// JBE_2
    29037U,	// JBE_4
    28785U,	// JB_1
    28785U,	// JB_2
    28785U,	// JB_4
    29932U,	// JCXZ
    29925U,	// JECXZ
    29077U,	// JE_1
    29077U,	// JE_2
    29077U,	// JE_4
    29057U,	// JGE_1
    29057U,	// JGE_2
    29057U,	// JGE_4
    29239U,	// JG_1
    29239U,	// JG_2
    29239U,	// JG_4
    29081U,	// JLE_1
    29081U,	// JLE_2
    29081U,	// JLE_4
    29285U,	// JL_1
    29285U,	// JL_2
    29285U,	// JL_4
    8928U,	// JMP16m
    8928U,	// JMP16m_NT
    4832U,	// JMP16r
    4832U,	// JMP16r_NT
    17120U,	// JMP32m
    17120U,	// JMP32m_NT
    4832U,	// JMP32r
    4832U,	// JMP32r_NT
    21216U,	// JMP64m
    21216U,	// JMP64m_NT
    4832U,	// JMP64r
    4832U,	// JMP64r_NT
    29408U,	// JMP_1
    29408U,	// JMP_2
    29408U,	// JMP_4
    29101U,	// JNE_1
    29101U,	// JNE_2
    29101U,	// JNE_4
    29353U,	// JNO_1
    29353U,	// JNO_2
    29353U,	// JNO_4
    29419U,	// JNP_1
    29419U,	// JNP_2
    29419U,	// JNP_4
    29658U,	// JNS_1
    29658U,	// JNS_2
    29658U,	// JNS_4
    29349U,	// JO_1
    29349U,	// JO_2
    29349U,	// JO_4
    29393U,	// JP_1
    29393U,	// JP_2
    29393U,	// JP_4
    29938U,	// JRCXZ
    29654U,	// JS_1
    29654U,	// JS_2
    29654U,	// JS_4
    2292U,	// LAHF
    38015851U,	// LAR16rm
    25432939U,	// LAR16rr
    38015851U,	// LAR32rm
    25432939U,	// LAR32rr
    38015851U,	// LAR64rm
    25432939U,	// LAR64rr
    54793146U,	// LDS16rm
    54793146U,	// LDS32rm
    58986559U,	// LEA16r
    58986559U,	// LEA32r
    58986559U,	// LEA64_32r
    58986559U,	// LEA64r
    2279U,	// LEAVE
    2279U,	// LEAVE64
    54793151U,	// LES16rm
    54793151U,	// LES32rm
    54793164U,	// LFS16rm
    54793164U,	// LFS32rm
    54793164U,	// LFS64rm
    54290U,	// LGDT16m
    54290U,	// LGDT32m
    54290U,	// LGDT64m
    54793169U,	// LGS16rm
    54793169U,	// LGS32rm
    54793169U,	// LGS64rm
    54302U,	// LIDT16m
    54302U,	// LIDT32m
    54302U,	// LIDT64m
    9258U,	// LLDT16m
    5162U,	// LLDT16r
    9340U,	// LMSW16m
    5244U,	// LMSW16r
    2353U,	// LOCK_PREFIX
    75021U,	// LODSB
    79407U,	// LODSL
    83650U,	// LODSQ
    87526U,	// LODSW
    29444U,	// LOOP
    29129U,	// LOOPE
    29106U,	// LOOPNE
    4643U,	// LRETIL
    4902U,	// LRETIQ
    4643U,	// LRETIW
    2313U,	// LRETL
    2491U,	// LRETQ
    2313U,	// LRETW
    38015611U,	// LSL16rm
    25432699U,	// LSL16rr
    38015611U,	// LSL32rm
    25432699U,	// LSL32rr
    38015611U,	// LSL64rm
    25432699U,	// LSL64rr
    54793207U,	// LSS16rm
    54793207U,	// LSS32rm
    54793207U,	// LSS64rm
    9128U,	// LTRm
    5032U,	// LTRr
    0U,	// MONITORX
    2886U,	// MONITORXrrr
    2419U,	// MONTMUL
    91602U,	// MOV16ao16
    91602U,	// MOV16ao32
    91580U,	// MOV16ao64
    271473U,	// MOV16mi
    271473U,	// MOV16mr
    271473U,	// MOV16ms
    1139825U,	// MOV16o16a
    1139825U,	// MOV16o32a
    1139634U,	// MOV16o64a
    25433201U,	// MOV16ri
    25433201U,	// MOV16ri_alt
    38016113U,	// MOV16rm
    25433201U,	// MOV16rr
    25433201U,	// MOV16rr_REV
    25433201U,	// MOV16rs
    38016113U,	// MOV16sm
    25433201U,	// MOV16sr
    95856U,	// MOV32ao16
    95856U,	// MOV32ao32
    95832U,	// MOV32ao64
    25433201U,	// MOV32cr
    25433201U,	// MOV32dr
    279665U,	// MOV32mi
    279665U,	// MOV32mr
    1406065U,	// MOV32o16a
    1406065U,	// MOV32o32a
    1405874U,	// MOV32o64a
    25433201U,	// MOV32rc
    25433201U,	// MOV32rd
    25433201U,	// MOV32ri
    25433201U,	// MOV32ri_alt
    29627505U,	// MOV32rm
    25433201U,	// MOV32rr
    25433201U,	// MOV32rr_REV
    25433201U,	// MOV32rs
    25433201U,	// MOV32sr
    100080U,	// MOV64ao32
    100056U,	// MOV64ao64
    25433201U,	// MOV64cr
    25433201U,	// MOV64dr
    283761U,	// MOV64mi32
    283761U,	// MOV64mr
    1672305U,	// MOV64o32a
    1672114U,	// MOV64o64a
    25433201U,	// MOV64rc
    25433201U,	// MOV64rd
    25433010U,	// MOV64ri
    25433201U,	// MOV64ri32
    33821809U,	// MOV64rm
    25433201U,	// MOV64rr
    25433201U,	// MOV64rr_REV
    25433201U,	// MOV64rs
    25433201U,	// MOV64sr
    103788U,	// MOV8ao16
    103788U,	// MOV8ao32
    103766U,	// MOV8ao64
    287857U,	// MOV8mi
    287857U,	// MOV8mr
    287857U,	// MOV8mr_NOREX
    1938545U,	// MOV8o16a
    1938545U,	// MOV8o32a
    1938354U,	// MOV8o64a
    25433201U,	// MOV8ri
    25433201U,	// MOV8ri_alt
    42210417U,	// MOV8rm
    42210417U,	// MOV8rm_NOREX
    25433201U,	// MOV8rr
    25433201U,	// MOV8rr_NOREX
    25433201U,	// MOV8rr_REV
    270714U,	// MOVBE16mr
    38015354U,	// MOVBE16rm
    278906U,	// MOVBE32mr
    29626746U,	// MOVBE32rm
    283002U,	// MOVBE64mr
    33821050U,	// MOVBE64rm
    63238281U,	// MOVSB
    67436874U,	// MOVSL
    71672667U,	// MOVSQ
    75830428U,	// MOVSW
    38016205U,	// MOVSX16rm16
    42210509U,	// MOVSX16rm8
    25433293U,	// MOVSX16rr16
    25433293U,	// MOVSX16rr8
    38016205U,	// MOVSX32rm16
    42210509U,	// MOVSX32rm8
    42210509U,	// MOVSX32rm8_NOREX
    25433293U,	// MOVSX32rr16
    25433293U,	// MOVSX32rr8
    25433293U,	// MOVSX32rr8_NOREX
    38016205U,	// MOVSX64rm16
    29626705U,	// MOVSX64rm32
    42210509U,	// MOVSX64rm8
    25433293U,	// MOVSX64rr16
    25432401U,	// MOVSX64rr32
    25433293U,	// MOVSX64rr8
    38016212U,	// MOVZX16rm16
    42210516U,	// MOVZX16rm8
    25433300U,	// MOVZX16rr16
    25433300U,	// MOVZX16rr8
    38016212U,	// MOVZX32rm16
    42210516U,	// MOVZX32rm8
    42210516U,	// MOVZX32rm8_NOREX
    25433300U,	// MOVZX32rr16
    25433300U,	// MOVZX32rr8
    25433300U,	// MOVZX32rr8_NOREX
    38016212U,	// MOVZX64rm16
    42210516U,	// MOVZX64rm8
    25433300U,	// MOVZX64rr16
    25433300U,	// MOVZX64rr8
    8839U,	// MUL16m
    4743U,	// MUL16r
    17031U,	// MUL32m
    4743U,	// MUL32r
    21127U,	// MUL64m
    4743U,	// MUL64r
    25223U,	// MUL8m
    4743U,	// MUL8r
    159650991U,	// MULX32rm
    696521903U,	// MULX32rr
    1233392815U,	// MULX64rm
    696521903U,	// MULX64rr
    2895U,	// MWAITXrrr
    8745U,	// NEG16m
    4649U,	// NEG16r
    16937U,	// NEG32m
    4649U,	// NEG32r
    21033U,	// NEG64m
    4649U,	// NEG64r
    25129U,	// NEG8m
    4649U,	// NEG8r
    2458U,	// NOOP
    8959U,	// NOOP18_16m4
    8959U,	// NOOP18_16m5
    8959U,	// NOOP18_16m6
    8959U,	// NOOP18_16m7
    4863U,	// NOOP18_16r4
    4863U,	// NOOP18_16r5
    4863U,	// NOOP18_16r6
    4863U,	// NOOP18_16r7
    17151U,	// NOOP18_m4
    17151U,	// NOOP18_m5
    17151U,	// NOOP18_m6
    17151U,	// NOOP18_m7
    4863U,	// NOOP18_r4
    4863U,	// NOOP18_r5
    4863U,	// NOOP18_r6
    4863U,	// NOOP18_r7
    46412543U,	// NOOP19rr
    17151U,	// NOOPL
    17151U,	// NOOPL_19
    17151U,	// NOOPL_1d
    17151U,	// NOOPL_1e
    4863U,	// NOOPLr
    21247U,	// NOOPQ
    4863U,	// NOOPQr
    8959U,	// NOOPW
    8959U,	// NOOPW_19
    8959U,	// NOOPW_1c
    8959U,	// NOOPW_1d
    8959U,	// NOOPW_1e
    4863U,	// NOOPWr
    9280U,	// NOT16m
    5184U,	// NOT16r
    17472U,	// NOT32m
    5184U,	// NOT32r
    21568U,	// NOT64m
    5184U,	// NOT64r
    25664U,	// NOT8m
    5184U,	// NOT8r
    5556U,	// OR16i16
    271239U,	// OR16mi
    271239U,	// OR16mi8
    271239U,	// OR16mr
    4469639U,	// OR16ri
    4469639U,	// OR16ri8
    8663943U,	// OR16rm
    4469639U,	// OR16rr
    4461447U,	// OR16rr_REV
    5711U,	// OR32i32
    279431U,	// OR32mi
    279431U,	// OR32mi8
    279431U,	// OR32mr
    4469639U,	// OR32ri
    4469639U,	// OR32ri8
    12858247U,	// OR32rm
    4469639U,	// OR32rr
    4461447U,	// OR32rr_REV
    5839U,	// OR64i32
    283527U,	// OR64mi32
    283527U,	// OR64mi8
    283527U,	// OR64mr
    4469639U,	// OR64ri32
    4469639U,	// OR64ri8
    17052551U,	// OR64rm
    4469639U,	// OR64rr
    4461447U,	// OR64rr_REV
    5454U,	// OR8i8
    287623U,	// OR8mi
    287623U,	// OR8mi8
    287623U,	// OR8mr
    4469639U,	// OR8ri
    4469639U,	// OR8ri8
    21246855U,	// OR8rm
    4469639U,	// OR8rr
    4461447U,	// OR8rr_REV
    1107046U,	// OUT16ir
    2723U,	// OUT16rr
    1369190U,	// OUT32ir
    2777U,	// OUT32rr
    1893478U,	// OUT8ir
    2358U,	// OUT8rr
    75514U,	// OUTSB
    79621U,	// OUTSL
    87824U,	// OUTSW
    2318U,	// PCONFIG
    4874U,	// POP16r
    8970U,	// POP16rmm
    4874U,	// POP16rmr
    4874U,	// POP32r
    17162U,	// POP32rmm
    4874U,	// POP32rmr
    4874U,	// POP64r
    21258U,	// POP64rmm
    4874U,	// POP64rmr
    2713U,	// POPA16
    2376U,	// POPA32
    2575U,	// POPDS16
    2575U,	// POPDS32
    2590U,	// POPES16
    2590U,	// POPES32
    2308U,	// POPF16
    2201U,	// POPF32
    2485U,	// POPF64
    2605U,	// POPFS16
    2605U,	// POPFS32
    2605U,	// POPFS64
    2620U,	// POPGS16
    2620U,	// POPGS32
    2620U,	// POPGS64
    2642U,	// POPSS16
    2642U,	// POPSS32
    20999U,	// PTWRITE64m
    4615U,	// PTWRITE64r
    16903U,	// PTWRITEm
    4615U,	// PTWRITEr
    4688U,	// PUSH16i8
    4688U,	// PUSH16r
    8784U,	// PUSH16rmm
    4688U,	// PUSH16rmr
    4688U,	// PUSH32i8
    4688U,	// PUSH32r
    16976U,	// PUSH32rmm
    4688U,	// PUSH32rmr
    4688U,	// PUSH64i32
    4688U,	// PUSH64i8
    4688U,	// PUSH64r
    21072U,	// PUSH64rmm
    4688U,	// PUSH64rmr
    2706U,	// PUSHA16
    2369U,	// PUSHA32
    2559U,	// PUSHCS16
    2559U,	// PUSHCS32
    2567U,	// PUSHDS16
    2567U,	// PUSHDS32
    2582U,	// PUSHES16
    2582U,	// PUSHES32
    2302U,	// PUSHF16
    2194U,	// PUSHF32
    2478U,	// PUSHF64
    2597U,	// PUSHFS16
    2597U,	// PUSHFS32
    2597U,	// PUSHFS64
    2612U,	// PUSHGS16
    2612U,	// PUSHGS32
    2612U,	// PUSHGS64
    2634U,	// PUSHSS16
    2634U,	// PUSHSS32
    4688U,	// PUSHi16
    4688U,	// PUSHi32
    8795U,	// RCL16m1
    2105947U,	// RCL16mCL
    79962715U,	// RCL16mi
    2363995U,	// RCL16r1
    2101851U,	// RCL16rCL
    84152923U,	// RCL16ri
    16987U,	// RCL32m1
    2114139U,	// RCL32mCL
    79970907U,	// RCL32mi
    2363995U,	// RCL32r1
    2101851U,	// RCL32rCL
    84152923U,	// RCL32ri
    21083U,	// RCL64m1
    2118235U,	// RCL64mCL
    79975003U,	// RCL64mi
    2363995U,	// RCL64r1
    2101851U,	// RCL64rCL
    84152923U,	// RCL64ri
    25179U,	// RCL8m1
    2122331U,	// RCL8mCL
    79979099U,	// RCL8mi
    2363995U,	// RCL8r1
    2101851U,	// RCL8rCL
    84152923U,	// RCL8ri
    9077U,	// RCR16m1
    2106229U,	// RCR16mCL
    79962997U,	// RCR16mi
    2364277U,	// RCR16r1
    2102133U,	// RCR16rCL
    84153205U,	// RCR16ri
    17269U,	// RCR32m1
    2114421U,	// RCR32mCL
    79971189U,	// RCR32mi
    2364277U,	// RCR32r1
    2102133U,	// RCR32rCL
    84153205U,	// RCR32ri
    21365U,	// RCR64m1
    2118517U,	// RCR64mCL
    79975285U,	// RCR64mi
    2364277U,	// RCR64r1
    2102133U,	// RCR64rCL
    84153205U,	// RCR64ri
    25461U,	// RCR8m1
    2122613U,	// RCR8mCL
    79979381U,	// RCR8mi
    2364277U,	// RCR8r1
    2102133U,	// RCR8rCL
    84153205U,	// RCR8ri
    0U,	// RDFLAGS32
    0U,	// RDFLAGS64
    4560U,	// RDFSBASE
    4560U,	// RDFSBASE64
    4580U,	// RDGSBASE
    4580U,	// RDGSBASE64
    2529U,	// RDMSR
    4322U,	// RDPID32
    4322U,	// RDPID64
    0U,	// RDPKRU
    2678U,	// RDPKRUr
    2171U,	// RDPMC
    4353U,	// RDRAND16r
    4353U,	// RDRAND32r
    4353U,	// RDRAND64r
    4305U,	// RDSEED16r
    4305U,	// RDSEED32r
    4305U,	// RDSEED64r
    4377U,	// RDSSPD
    4918U,	// RDSSPQ
    2184U,	// RDTSC
    2447U,	// RDTSCP
    2261U,	// REPNE_PREFIX
    2454U,	// REP_PREFIX
    0U,	// RET
    5174U,	// RETIL
    5174U,	// RETIQ
    5174U,	// RETIW
    2655U,	// RETL
    2655U,	// RETQ
    2655U,	// RETW
    2011U,	// REX64_PREFIX
    2368112U,	// ROL16m1
    2105968U,	// ROL16mCL
    79962736U,	// ROL16mi
    2364016U,	// ROL16r1
    2101872U,	// ROL16rCL
    84152944U,	// ROL16ri
    2376304U,	// ROL32m1
    2114160U,	// ROL32mCL
    79970928U,	// ROL32mi
    2364016U,	// ROL32r1
    2101872U,	// ROL32rCL
    84152944U,	// ROL32ri
    2380400U,	// ROL64m1
    2118256U,	// ROL64mCL
    79975024U,	// ROL64mi
    2364016U,	// ROL64r1
    2101872U,	// ROL64rCL
    84152944U,	// ROL64ri
    2384496U,	// ROL8m1
    2122352U,	// ROL8mCL
    79979120U,	// ROL8mi
    2364016U,	// ROL8r1
    2101872U,	// ROL8rCL
    84152944U,	// ROL8ri
    2368390U,	// ROR16m1
    2106246U,	// ROR16mCL
    79963014U,	// ROR16mi
    2364294U,	// ROR16r1
    2102150U,	// ROR16rCL
    84153222U,	// ROR16ri
    2376582U,	// ROR32m1
    2114438U,	// ROR32mCL
    79971206U,	// ROR32mi
    2364294U,	// ROR32r1
    2102150U,	// ROR32rCL
    84153222U,	// ROR32ri
    2380678U,	// ROR64m1
    2118534U,	// ROR64mCL
    79975302U,	// ROR64mi
    2364294U,	// ROR64r1
    2102150U,	// ROR64rCL
    84153222U,	// ROR64ri
    2384774U,	// ROR8m1
    2122630U,	// ROR8mCL
    79979398U,	// ROR8mi
    2364294U,	// ROR8r1
    2102150U,	// ROR8rCL
    84153222U,	// ROR8ri
    2311328967U,	// RORX32mi
    2844005575U,	// RORX32ri
    2315523271U,	// RORX64mi
    2844005575U,	// RORX64ri
    2434U,	// RSM
    17167U,	// RSTORSSP
    2297U,	// SAHF
    2368086U,	// SAL16m1
    2105942U,	// SAL16mCL
    270934U,	// SAL16mi
    2363990U,	// SAL16r1
    2101846U,	// SAL16rCL
    4461142U,	// SAL16ri
    2376278U,	// SAL32m1
    2114134U,	// SAL32mCL
    279126U,	// SAL32mi
    2363990U,	// SAL32r1
    2101846U,	// SAL32rCL
    4461142U,	// SAL32ri
    2380374U,	// SAL64m1
    2118230U,	// SAL64mCL
    283222U,	// SAL64mi
    2363990U,	// SAL64r1
    2101846U,	// SAL64rCL
    4461142U,	// SAL64ri
    2384470U,	// SAL8m1
    2122326U,	// SAL8mCL
    287318U,	// SAL8mi
    2363990U,	// SAL8r1
    2101846U,	// SAL8rCL
    4461142U,	// SAL8ri
    2158U,	// SALC
    2368368U,	// SAR16m1
    2106224U,	// SAR16mCL
    79962992U,	// SAR16mi
    2364272U,	// SAR16r1
    2102128U,	// SAR16rCL
    84153200U,	// SAR16ri
    2376560U,	// SAR32m1
    2114416U,	// SAR32mCL
    79971184U,	// SAR32mi
    2364272U,	// SAR32r1
    2102128U,	// SAR32rCL
    84153200U,	// SAR32ri
    2380656U,	// SAR64m1
    2118512U,	// SAR64mCL
    79975280U,	// SAR64mi
    2364272U,	// SAR64r1
    2102128U,	// SAR64rCL
    84153200U,	// SAR64ri
    2384752U,	// SAR8m1
    2122608U,	// SAR8mCL
    79979376U,	// SAR8mi
    2364272U,	// SAR8r1
    2102128U,	// SAR8rCL
    84153200U,	// SAR8ri
    1774458043U,	// SARX32rm
    696521915U,	// SARX32rr
    1778652347U,	// SARX64rm
    696521915U,	// SARX64rr
    2462U,	// SAVEPREVSSP
    5493U,	// SBB16i16
    270444U,	// SBB16mi
    270444U,	// SBB16mi8
    270444U,	// SBB16mr
    4468844U,	// SBB16ri
    4468844U,	// SBB16ri8
    8663148U,	// SBB16rm
    4468844U,	// SBB16rr
    4460652U,	// SBB16rr_REV
    5617U,	// SBB32i32
    278636U,	// SBB32mi
    278636U,	// SBB32mi8
    278636U,	// SBB32mr
    4468844U,	// SBB32ri
    4468844U,	// SBB32ri8
    12857452U,	// SBB32rm
    4468844U,	// SBB32rr
    4460652U,	// SBB32rr_REV
    5754U,	// SBB64i32
    282732U,	// SBB64mi32
    282732U,	// SBB64mi8
    282732U,	// SBB64mr
    4468844U,	// SBB64ri32
    4468844U,	// SBB64ri8
    17051756U,	// SBB64rm
    4468844U,	// SBB64rr
    4460652U,	// SBB64rr_REV
    5369U,	// SBB8i8
    286828U,	// SBB8mi
    286828U,	// SBB8mi8
    286828U,	// SBB8mr
    4468844U,	// SBB8ri
    4468844U,	// SBB8ri8
    21246060U,	// SBB8rm
    4468844U,	// SBB8rr
    4460652U,	// SBB8rr_REV
    62722U,	// SCASB
    67107U,	// SCASL
    108214U,	// SCASQ
    71131U,	// SCASW
    24926U,	// SETAEm
    4446U,	// SETAEr
    24648U,	// SETAm
    4168U,	// SETAr
    24946U,	// SETBEm
    4466U,	// SETBEr
    24720U,	// SETBm
    4240U,	// SETBr
    25080U,	// SETEm
    4600U,	// SETEr
    24966U,	// SETGEm
    4486U,	// SETGEr
    25155U,	// SETGm
    4675U,	// SETGr
    24990U,	// SETLEm
    4510U,	// SETLEr
    25216U,	// SETLm
    4736U,	// SETLr
    25018U,	// SETNEm
    4538U,	// SETNEr
    25262U,	// SETNOm
    4782U,	// SETNOr
    25328U,	// SETNPm
    4848U,	// SETNPr
    25567U,	// SETNSm
    5087U,	// SETNSr
    25277U,	// SETOm
    4797U,	// SETOr
    25369U,	// SETPm
    4889U,	// SETPr
    2902U,	// SETSSBSY
    25601U,	// SETSm
    5121U,	// SETSr
    54296U,	// SGDT16m
    54296U,	// SGDT32m
    54296U,	// SGDT64m
    2368096U,	// SHL16m1
    2105952U,	// SHL16mCL
    79962720U,	// SHL16mi
    2364000U,	// SHL16r1
    2101856U,	// SHL16rCL
    84152928U,	// SHL16ri
    2376288U,	// SHL32m1
    2114144U,	// SHL32mCL
    79970912U,	// SHL32mi
    2364000U,	// SHL32r1
    2101856U,	// SHL32rCL
    84152928U,	// SHL32ri
    2380384U,	// SHL64m1
    2118240U,	// SHL64mCL
    79975008U,	// SHL64mi
    2364000U,	// SHL64r1
    2101856U,	// SHL64rCL
    84152928U,	// SHL64ri
    2384480U,	// SHL8m1
    2122336U,	// SHL8mCL
    79979104U,	// SHL8mi
    2364000U,	// SHL8r1
    2101856U,	// SHL8rCL
    84152928U,	// SHL8ri
    268706034U,	// SHLD16mrCL
    2281971954U,	// SHLD16mri8
    272896242U,	// SHLD16rrCL
    3359903986U,	// SHLD16rri8
    268714226U,	// SHLD32mrCL
    2281980146U,	// SHLD32mri8
    272896242U,	// SHLD32rrCL
    3359903986U,	// SHLD32rri8
    268718322U,	// SHLD64mrCL
    2281984242U,	// SHLD64mri8
    272896242U,	// SHLD64rrCL
    3359903986U,	// SHLD64rri8
    1774458025U,	// SHLX32rm
    696521897U,	// SHLX32rr
    1778652329U,	// SHLX64rm
    696521897U,	// SHLX64rr
    2368385U,	// SHR16m1
    2106241U,	// SHR16mCL
    79963009U,	// SHR16mi
    2364289U,	// SHR16r1
    2102145U,	// SHR16rCL
    84153217U,	// SHR16ri
    2376577U,	// SHR32m1
    2114433U,	// SHR32mCL
    79971201U,	// SHR32mi
    2364289U,	// SHR32r1
    2102145U,	// SHR32rCL
    84153217U,	// SHR32ri
    2380673U,	// SHR64m1
    2118529U,	// SHR64mCL
    79975297U,	// SHR64mi
    2364289U,	// SHR64r1
    2102145U,	// SHR64rCL
    84153217U,	// SHR64ri
    2384769U,	// SHR8m1
    2122625U,	// SHR8mCL
    79979393U,	// SHR8mi
    2364289U,	// SHR8r1
    2102145U,	// SHR8rCL
    84153217U,	// SHR8ri
    268706081U,	// SHRD16mrCL
    2281972001U,	// SHRD16mri8
    272896289U,	// SHRD16rrCL
    3359904033U,	// SHRD16rri8
    268714273U,	// SHRD32mrCL
    2281980193U,	// SHRD32mri8
    272896289U,	// SHRD32rrCL
    3359904033U,	// SHRD32rri8
    268718369U,	// SHRD64mrCL
    2281984289U,	// SHRD64mri8
    272896289U,	// SHRD64rrCL
    3359904033U,	// SHRD64rri8
    1774458049U,	// SHRX32rm
    696521921U,	// SHRX32rr
    1778652353U,	// SHRX64rm
    696521921U,	// SHRX64rr
    54308U,	// SIDT16m
    54308U,	// SIDT32m
    54308U,	// SIDT64m
    2766U,	// SKINIT
    9264U,	// SLDT16m
    5168U,	// SLDT16r
    5168U,	// SLDT32r
    5168U,	// SLDT64r
    9346U,	// SMSW16m
    5250U,	// SMSW16r
    5250U,	// SMSW32r
    5250U,	// SMSW64r
    2136U,	// STAC
    2190U,	// STC
    2223U,	// STD
    2340U,	// STGI
    2349U,	// STI
    1896571U,	// STOSB
    1376557U,	// STOSL
    1680190U,	// STOSQ
    1119374U,	// STOSW
    5037U,	// STR16r
    5037U,	// STR32r
    5037U,	// STR64r
    9133U,	// STRm
    5502U,	// SUB16i16
    270486U,	// SUB16mi
    270486U,	// SUB16mi8
    270486U,	// SUB16mr
    4468886U,	// SUB16ri
    4468886U,	// SUB16ri8
    8663190U,	// SUB16rm
    4468886U,	// SUB16rr
    4460694U,	// SUB16rr_REV
    5627U,	// SUB32i32
    278678U,	// SUB32mi
    278678U,	// SUB32mi8
    278678U,	// SUB32mr
    4468886U,	// SUB32ri
    4468886U,	// SUB32ri8
    12857494U,	// SUB32rm
    4468886U,	// SUB32rr
    4460694U,	// SUB32rr_REV
    5764U,	// SUB64i32
    282774U,	// SUB64mi32
    282774U,	// SUB64mi8
    282774U,	// SUB64mr
    4468886U,	// SUB64ri32
    4468886U,	// SUB64ri8
    17051798U,	// SUB64rm
    4468886U,	// SUB64rr
    4460694U,	// SUB64rr_REV
    5400U,	// SUB8i8
    286870U,	// SUB8mi
    286870U,	// SUB8mi8
    286870U,	// SUB8mr
    4468886U,	// SUB8ri
    4468886U,	// SUB8ri8
    21246102U,	// SUB8rm
    4468886U,	// SUB8rr
    4460694U,	// SUB8rr_REV
    2627U,	// SWAPGS
    2411U,	// SYSCALL
    2520U,	// SYSENTER
    2666U,	// SYSEXIT
    2511U,	// SYSEXIT64
    2659U,	// SYSRET
    2503U,	// SYSRET64
    29408U,	// TAILJMPd
    29408U,	// TAILJMPd64
    0U,	// TAILJMPd64_CC
    0U,	// TAILJMPd_CC
    17120U,	// TAILJMPm
    21216U,	// TAILJMPm64
    21210U,	// TAILJMPm64_REX
    0U,	// TAILJMPr
    4832U,	// TAILJMPr64
    4826U,	// TAILJMPr64_REX
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi64
    0U,	// TCRETURNdi64cc
    0U,	// TCRETURNdicc
    0U,	// TCRETURNmi
    0U,	// TCRETURNmi64
    0U,	// TCRETURNri
    0U,	// TCRETURNri64
    5576U,	// TEST16i16
    271447U,	// TEST16mi
    271447U,	// TEST16mr
    25433175U,	// TEST16ri
    25433175U,	// TEST16rr
    5733U,	// TEST32i32
    279639U,	// TEST32mi
    279639U,	// TEST32mr
    25433175U,	// TEST32ri
    25433175U,	// TEST32rr
    5861U,	// TEST64i32
    283735U,	// TEST64mi32
    283735U,	// TEST64mr
    25433175U,	// TEST64ri32
    25433175U,	// TEST64rr
    5474U,	// TEST8i8
    287831U,	// TEST8mi
    287831U,	// TEST8mr
    25433175U,	// TEST8ri
    25433175U,	// TEST8rr
    1967U,	// UD0
    1977U,	// UD1
    1994U,	// UD2
    9112U,	// VERRm
    5016U,	// VERRr
    9334U,	// VERWm
    5238U,	// VERWr
    2404U,	// VMCALL
    21346U,	// VMCLEARm
    2177U,	// VMFUNC
    2326U,	// VMLAUNCH
    2734U,	// VMLOAD32
    2789U,	// VMLOAD64
    2396U,	// VMMCALL
    20728U,	// VMPTRLDm
    21597U,	// VMPTRSTm
    278723U,	// VMREAD32mr
    25432259U,	// VMREAD32rr
    282819U,	// VMREAD64mr
    25432259U,	// VMREAD64rr
    2252U,	// VMRESUME
    2756U,	// VMRUN32
    2811U,	// VMRUN64
    2745U,	// VMSAVE32
    2800U,	// VMSAVE64
    29626878U,	// VMWRITE32rm
    25432574U,	// VMWRITE32rr
    33821182U,	// VMWRITE64rm
    25432574U,	// VMWRITE64rr
    2285U,	// VMXOFF
    21150U,	// VMXON
    2227U,	// WBINVD
    2234U,	// WBNOINVD
    0U,	// WRFLAGS32
    0U,	// WRFLAGS64
    4570U,	// WRFSBASE
    4570U,	// WRFSBASE64
    4590U,	// WRGSBASE
    4590U,	// WRGSBASE64
    2535U,	// WRMSR
    0U,	// WRPKRU
    2685U,	// WRPKRUr
    278843U,	// WRSSD
    283468U,	// WRSSQ
    278850U,	// WRUSSD
    283475U,	// WRUSSQ
    110795U,	// XADD16rm
    114891U,	// XADD16rr
    118987U,	// XADD32rm
    114891U,	// XADD32rr
    123083U,	// XADD64rm
    114891U,	// XADD64rr
    127179U,	// XADD8rm
    114891U,	// XADD8rr
    1061425U,	// XCHG16ar
    111153U,	// XCHG16rm
    131633U,	// XCHG16rr
    1323569U,	// XCHG32ar
    119345U,	// XCHG32rm
    131633U,	// XCHG32rr
    1585713U,	// XCHG64ar
    123441U,	// XCHG64rm
    131633U,	// XCHG64rr
    127537U,	// XCHG8rm
    131633U,	// XCHG8rr
    2141U,	// XCRYPTCBC
    2105U,	// XCRYPTCFB
    2541U,	// XCRYPTCTR
    2095U,	// XCRYPTECB
    2115U,	// XCRYPTOFB
    2692U,	// XGETBV
    2125U,	// XLAT
    5555U,	// XOR16i16
    271251U,	// XOR16mi
    271251U,	// XOR16mi8
    271251U,	// XOR16mr
    4469651U,	// XOR16ri
    4469651U,	// XOR16ri8
    8663955U,	// XOR16rm
    4469651U,	// XOR16rr
    4461459U,	// XOR16rr_REV
    5710U,	// XOR32i32
    279443U,	// XOR32mi
    279443U,	// XOR32mi8
    279443U,	// XOR32mr
    4469651U,	// XOR32ri
    4469651U,	// XOR32ri8
    12858259U,	// XOR32rm
    4469651U,	// XOR32rr
    4461459U,	// XOR32rr_REV
    5838U,	// XOR64i32
    283539U,	// XOR64mi32
    283539U,	// XOR64mi8
    283539U,	// XOR64mr
    4469651U,	// XOR64ri32
    4469651U,	// XOR64ri8
    17052563U,	// XOR64rm
    4469651U,	// XOR64rr
    4461459U,	// XOR64rr_REV
    5453U,	// XOR8i8
    287635U,	// XOR8mi
    287635U,	// XOR8mi8
    287635U,	// XOR8mr
    4469651U,	// XOR8ri
    4469651U,	// XOR8ri8
    21246867U,	// XOR8rm
    4469651U,	// XOR8rr
    4461459U,	// XOR8rr_REV
    54155U,	// XRSTOR
    53268U,	// XRSTOR64
    54254U,	// XRSTORS
    53288U,	// XRSTORS64
    53776U,	// XSAVE
    53259U,	// XSAVE64
    53420U,	// XSAVEC
    53249U,	// XSAVEC64
    54349U,	// XSAVEOPT
    53299U,	// XSAVEOPT64
    54212U,	// XSAVES
    53278U,	// XSAVES64
    2699U,	// XSETBV
    1971U,	// XSHA1
    2024U,	// XSHA256
    2272U,	// XSTORE
  };

  unsigned int opcode = MCInst_getOpcode(MI);
  // printf("opcode = %u\n", opcode);

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[opcode] << 0;
  SStream_concat0(O, AsmStrs+(Bits & 4095)-1);


  // Fragment 0 encoded into 6 bits for 33 unique commands.
  // printf("Fragment 0: %"PRIu64"\n", ((Bits >> 12) & 63));
  switch ((Bits >> 12) & 63) {
  default: // unreachable
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // AAD8i8, AAM8i8, ADC16i16, ADC16rr_REV, ADC32i32, ADC32rr_REV, ADC64i32...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADC16mi, ADC16mi8, ADC16mr, ADD16mi, ADD16mi8, ADD16mr, AND16mi, AND16...
    printi16mem(MI, 0, O);
    break;
  case 3:
    // ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC32ri, ADC32ri8, ADC32rm, ADC32...
    printOperand(MI, 1, O);
    break;
  case 4:
    // ADC32mi, ADC32mi8, ADC32mr, ADD32mi, ADD32mi8, ADD32mr, AND32mi, AND32...
    printi32mem(MI, 0, O);
    break;
  case 5:
    // ADC64mi32, ADC64mi8, ADC64mr, ADD64mi32, ADD64mi8, ADD64mr, AND64mi32,...
    printi64mem(MI, 0, O);
    break;
  case 6:
    // ADC8mi, ADC8mi8, ADC8mr, ADD8mi, ADD8mi8, ADD8mr, AND8mi, AND8mi8, AND...
    printi8mem(MI, 0, O);
    break;
  case 7:
    // CALL64pcrel32, CALLpcrel16, CALLpcrel32, JAE_1, JAE_2, JAE_4, JA_1, JA...
    printPCRelImm(MI, 0, O);
    return;
    break;
  case 8:
    // CMPSB
    printSrcIdx8(MI, 1, O);
    SStream_concat0(O, ", ");
    printDstIdx8(MI, 0, O);
    return;
    break;
  case 9:
    // CMPSL
    printSrcIdx32(MI, 1, O);
    SStream_concat0(O, ", ");
    printDstIdx32(MI, 0, O);
    return;
    break;
  case 10:
    // CMPSQ
    printSrcIdx64(MI, 1, O);
    SStream_concat0(O, ", ");
    printDstIdx64(MI, 0, O);
    return;
    break;
  case 11:
    // CMPSW
    printSrcIdx16(MI, 1, O);
    SStream_concat0(O, ", ");
    printDstIdx16(MI, 0, O);
    return;
    break;
  case 12:
    // CMPXCHG16B
    printi128mem(MI, 0, O);
    return;
    break;
  case 13:
    // FARCALL16m, FARCALL32m, FARCALL64, FARJMP16m, FARJMP32m, FARJMP64, LGD...
    printopaquemem(MI, 0, O);
    return;
    break;
  case 14:
    // IN16ri, IN32ri, IN8ri, INT, OUT16ir, OUT32ir, OUT8ir
    printU8Imm(MI, 0, O);
    break;
  case 15:
    // INSB, MOVSB, SCASB, STOSB
    printDstIdx8(MI, 0, O);
    break;
  case 16:
    // INSL, MOVSL, SCASL, STOSL
    printDstIdx32(MI, 0, O);
    break;
  case 17:
    // INSW, MOVSW, SCASW, STOSW
    printDstIdx16(MI, 0, O);
    break;
  case 18:
    // LODSB, OUTSB
    printSrcIdx8(MI, 0, O);
    return;
    break;
  case 19:
    // LODSL, OUTSL
    printSrcIdx32(MI, 0, O);
    return;
    break;
  case 20:
    // LODSQ
    printSrcIdx64(MI, 0, O);
    return;
    break;
  case 21:
    // LODSW, OUTSW
    printSrcIdx16(MI, 0, O);
    return;
    break;
  case 22:
    // MOV16ao16, MOV16ao32, MOV16ao64, MOV16o16a, MOV16o32a, MOV16o64a
    printMemOffs16(MI, 0, O);
    break;
  case 23:
    // MOV32ao16, MOV32ao32, MOV32ao64, MOV32o16a, MOV32o32a, MOV32o64a
    printMemOffs32(MI, 0, O);
    break;
  case 24:
    // MOV64ao32, MOV64ao64, MOV64o32a, MOV64o64a
    printMemOffs64(MI, 0, O);
    break;
  case 25:
    // MOV8ao16, MOV8ao32, MOV8ao64, MOV8o16a, MOV8o32a, MOV8o64a
    printMemOffs8(MI, 0, O);
    break;
  case 26:
    // MOVSQ, SCASQ, STOSQ
    printDstIdx64(MI, 0, O);
    break;
  case 27:
    // XADD16rm, XCHG16rm
    printi16mem(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 28:
    // XADD16rr, XADD32rr, XADD64rr, XADD8rr
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 3, O);
    return;
    break;
  case 29:
    // XADD32rm, XCHG32rm
    printi32mem(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 30:
    // XADD64rm, XCHG64rm
    printi64mem(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 31:
    // XADD8rm, XCHG8rm
    printi8mem(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 32:
    // XCHG16rr, XCHG32rr, XCHG64rr, XCHG8rr
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 10 unique commands.
  // printf("Fragment 1: %"PRIu64"\n", ((Bits >> 18) & 15));
  switch ((Bits >> 18) & 15) {
  default: // unreachable
  case 0:
    // AAD8i8, AAM8i8, ADC16i16, ADC32i32, ADC64i32, ADC8i8, ADD16i16, ADD32i...
    return;
    break;
  case 1:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC16...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // FARJMP16i, FARJMP32i
    SStream_concat0(O, ":");
    printOperand(MI, 0, O);
    return;
    break;
  case 3:
    // INSB, INSL, INSW
    SStream_concat0(O, ", dx");
    op_addReg(MI, X86_REG_DX);
    return;
    break;
  case 4:
    // MOV16o16a, MOV16o32a, MOV16o64a, OUT16ir, STOSW, XCHG16ar
    SStream_concat0(O, ", ax");
    op_addReg(MI, X86_REG_AX);
    return;
    break;
  case 5:
    // MOV32o16a, MOV32o32a, MOV32o64a, OUT32ir, STOSL, XCHG32ar
    SStream_concat0(O, ", eax");
    op_addReg(MI, X86_REG_EAX);
    return;
    break;
  case 6:
    // MOV64o32a, MOV64o64a, STOSQ, XCHG64ar
    SStream_concat0(O, ", rax");
    op_addReg(MI, X86_REG_RAX);
    return;
    break;
  case 7:
    // MOV8o16a, MOV8o32a, MOV8o64a, OUT8ir, STOSB
    SStream_concat0(O, ", al");
    op_addReg(MI, X86_REG_AL);
    return;
    break;
  case 8:
    // RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL, RCL8mCL, R...
    SStream_concat0(O, ", cl");
    op_addReg(MI, X86_REG_CL);
    return;
    break;
  case 9:
    // RCL16r1, RCL32r1, RCL64r1, RCL8r1, RCR16r1, RCR32r1, RCR64r1, RCR8r1, ...
    SStream_concat0(O, ", 1");
    op_addImm(MI, 1);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 21 unique commands.
  // printf("Fragment 2: %"PRIu64"\n", ((Bits >> 22) & 31));
  switch ((Bits >> 22) & 31) {
  default: // unreachable
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC32mi, ADC32mi8, ADC32mr, ADC64mi32, ADC...
    printOperand(MI, 5, O);
    break;
  case 1:
    // ADC16ri, ADC16ri8, ADC16rr, ADC16rr_REV, ADC32ri, ADC32ri8, ADC32rr, A...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADC16rm, ADD16rm, AND16rm, CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16r...
    printi16mem(MI, 2, O);
    return;
    break;
  case 3:
    // ADC32rm, ADCX32rm, ADD32rm, ADOX32rm, AND32rm, CMOVA32rm, CMOVAE32rm, ...
    printi32mem(MI, 2, O);
    return;
    break;
  case 4:
    // ADC64rm, ADCX64rm, ADD64rm, ADOX64rm, AND64rm, CMOVA64rm, CMOVAE64rm, ...
    printi64mem(MI, 2, O);
    return;
    break;
  case 5:
    // ADC8rm, ADD8rm, AND8rm, OR8rm, SBB8rm, SUB8rm, XOR8rm
    printi8mem(MI, 2, O);
    return;
    break;
  case 6:
    // ANDN32rm, ANDN32rr, ANDN64rm, ANDN64rr, ARPL16rr, BSF16rr, BSF32rr, BS...
    printOperand(MI, 1, O);
    break;
  case 7:
    // BOUNDS16rm, BSF32rm, BSR32rm, CMP32rm, IMUL32rmi, IMUL32rmi8, MOV32rm,...
    printi32mem(MI, 1, O);
    break;
  case 8:
    // BOUNDS32rm, BSF64rm, BSR64rm, CMP64rm, IMUL64rmi32, IMUL64rmi8, MOV64r...
    printi64mem(MI, 1, O);
    break;
  case 9:
    // BSF16rm, BSR16rm, CMP16rm, IMUL16rmi, IMUL16rmi8, LAR16rm, LAR32rm, LA...
    printi16mem(MI, 1, O);
    break;
  case 10:
    // CMP8rm, MOV8rm, MOV8rm_NOREX, MOVSX16rm8, MOVSX32rm8, MOVSX32rm8_NOREX...
    printi8mem(MI, 1, O);
    return;
    break;
  case 11:
    // FARCALL16i, FARCALL32i, NOOP19rr
    printOperand(MI, 0, O);
    return;
    break;
  case 12:
    // INVEPT32, INVEPT64, INVPCID32, INVPCID64, INVVPID32, INVVPID64
    printi128mem(MI, 1, O);
    return;
    break;
  case 13:
    // LDS16rm, LDS32rm, LES16rm, LES32rm, LFS16rm, LFS32rm, LFS64rm, LGS16rm...
    printopaquemem(MI, 1, O);
    return;
    break;
  case 14:
    // LEA16r, LEA32r, LEA64_32r, LEA64r
    printanymem(MI, 1, O);
    return;
    break;
  case 15:
    // MOVSB
    printSrcIdx8(MI, 1, O);
    return;
    break;
  case 16:
    // MOVSL
    printSrcIdx32(MI, 1, O);
    return;
    break;
  case 17:
    // MOVSQ
    printSrcIdx64(MI, 1, O);
    return;
    break;
  case 18:
    // MOVSW
    printSrcIdx16(MI, 1, O);
    return;
    break;
  case 19:
    // RCL16mi, RCL32mi, RCL64mi, RCL8mi, RCR16mi, RCR32mi, RCR64mi, RCR8mi, ...
    printU8Imm(MI, 5, O);
    return;
    break;
  case 20:
    // RCL16ri, RCL32ri, RCL64ri, RCL8ri, RCR16ri, RCR32ri, RCR64ri, RCR8ri, ...
    printU8Imm(MI, 2, O);
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  // printf("Fragment 3: %"PRIu64"\n", ((Bits >> 27) & 3));
  switch ((Bits >> 27) & 3) {
  default: // unreachable
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16ri, ADC16ri8, ADC16rr, ADC16rr_REV, A...
    return;
    break;
  case 1:
    // ANDN32rm, ANDN32rr, ANDN64rm, ANDN64rr, IMUL16rmi, IMUL16rmi8, IMUL16r...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // SHLD16mrCL, SHLD16rrCL, SHLD32mrCL, SHLD32rrCL, SHLD64mrCL, SHLD64rrCL...
    SStream_concat0(O, ", cl");
    op_addReg(MI, X86_REG_CL);
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  // printf("Fragment 4: %"PRIu64"\n", ((Bits >> 29) & 7));
  switch ((Bits >> 29) & 7) {
  default: // unreachable
  case 0:
    // ANDN32rm, MULX32rm
    printi32mem(MI, 2, O);
    return;
    break;
  case 1:
    // ANDN32rr, ANDN64rr, IMUL16rri, IMUL16rri8, IMUL32rri, IMUL32rri8, IMUL...
    printOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ANDN64rm, MULX64rm
    printi64mem(MI, 2, O);
    return;
    break;
  case 3:
    // IMUL16rmi, IMUL16rmi8, IMUL32rmi, IMUL32rmi8, IMUL64rmi32, IMUL64rmi8,...
    printOperand(MI, 6, O);
    return;
    break;
  case 4:
    // RORX32mi, RORX64mi, SHLD16mri8, SHLD32mri8, SHLD64mri8, SHRD16mri8, SH...
    printU8Imm(MI, 6, O);
    return;
    break;
  case 5:
    // RORX32ri, RORX64ri
    printU8Imm(MI, 2, O);
    return;
    break;
  case 6:
    // SHLD16rri8, SHLD32rri8, SHLD64rri8, SHRD16rri8, SHRD32rri8, SHRD64rri8
    printU8Imm(MI, 3, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static const char *getRegisterName(unsigned RegNo)
{

#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ 's', 't', '(', '0', ')', 0,
  /* 6 */ 's', 't', '(', '1', ')', 0,
  /* 12 */ 's', 't', '(', '2', ')', 0,
  /* 18 */ 's', 't', '(', '3', ')', 0,
  /* 24 */ 's', 't', '(', '4', ')', 0,
  /* 30 */ 's', 't', '(', '5', ')', 0,
  /* 36 */ 's', 't', '(', '6', ')', 0,
  /* 42 */ 's', 't', '(', '7', ')', 0,
  /* 48 */ 'x', 'm', 'm', '1', '0', 0,
  /* 54 */ 'y', 'm', 'm', '1', '0', 0,
  /* 60 */ 'z', 'm', 'm', '1', '0', 0,
  /* 66 */ 'c', 'r', '1', '0', 0,
  /* 71 */ 'd', 'r', '1', '0', 0,
  /* 76 */ 'x', 'm', 'm', '2', '0', 0,
  /* 82 */ 'y', 'm', 'm', '2', '0', 0,
  /* 88 */ 'z', 'm', 'm', '2', '0', 0,
  /* 94 */ 'x', 'm', 'm', '3', '0', 0,
  /* 100 */ 'y', 'm', 'm', '3', '0', 0,
  /* 106 */ 'z', 'm', 'm', '3', '0', 0,
  /* 112 */ 'b', 'n', 'd', '0', 0,
  /* 117 */ 'k', '0', 0,
  /* 120 */ 'x', 'm', 'm', '0', 0,
  /* 125 */ 'y', 'm', 'm', '0', 0,
  /* 130 */ 'z', 'm', 'm', '0', 0,
  /* 135 */ 'f', 'p', '0', 0,
  /* 139 */ 'c', 'r', '0', 0,
  /* 143 */ 'd', 'r', '0', 0,
  /* 147 */ 'x', 'm', 'm', '1', '1', 0,
  /* 153 */ 'y', 'm', 'm', '1', '1', 0,
  /* 159 */ 'z', 'm', 'm', '1', '1', 0,
  /* 165 */ 'c', 'r', '1', '1', 0,
  /* 170 */ 'd', 'r', '1', '1', 0,
  /* 175 */ 'x', 'm', 'm', '2', '1', 0,
  /* 181 */ 'y', 'm', 'm', '2', '1', 0,
  /* 187 */ 'z', 'm', 'm', '2', '1', 0,
  /* 193 */ 'x', 'm', 'm', '3', '1', 0,
  /* 199 */ 'y', 'm', 'm', '3', '1', 0,
  /* 205 */ 'z', 'm', 'm', '3', '1', 0,
  /* 211 */ 'b', 'n', 'd', '1', 0,
  /* 216 */ 'k', '1', 0,
  /* 219 */ 'x', 'm', 'm', '1', 0,
  /* 224 */ 'y', 'm', 'm', '1', 0,
  /* 229 */ 'z', 'm', 'm', '1', 0,
  /* 234 */ 'f', 'p', '1', 0,
  /* 238 */ 'c', 'r', '1', 0,
  /* 242 */ 'd', 'r', '1', 0,
  /* 246 */ 'x', 'm', 'm', '1', '2', 0,
  /* 252 */ 'y', 'm', 'm', '1', '2', 0,
  /* 258 */ 'z', 'm', 'm', '1', '2', 0,
  /* 264 */ 'c', 'r', '1', '2', 0,
  /* 269 */ 'd', 'r', '1', '2', 0,
  /* 274 */ 'x', 'm', 'm', '2', '2', 0,
  /* 280 */ 'y', 'm', 'm', '2', '2', 0,
  /* 286 */ 'z', 'm', 'm', '2', '2', 0,
  /* 292 */ 'b', 'n', 'd', '2', 0,
  /* 297 */ 'k', '2', 0,
  /* 300 */ 'x', 'm', 'm', '2', 0,
  /* 305 */ 'y', 'm', 'm', '2', 0,
  /* 310 */ 'z', 'm', 'm', '2', 0,
  /* 315 */ 'f', 'p', '2', 0,
  /* 319 */ 'c', 'r', '2', 0,
  /* 323 */ 'd', 'r', '2', 0,
  /* 327 */ 'x', 'm', 'm', '1', '3', 0,
  /* 333 */ 'y', 'm', 'm', '1', '3', 0,
  /* 339 */ 'z', 'm', 'm', '1', '3', 0,
  /* 345 */ 'c', 'r', '1', '3', 0,
  /* 350 */ 'd', 'r', '1', '3', 0,
  /* 355 */ 'x', 'm', 'm', '2', '3', 0,
  /* 361 */ 'y', 'm', 'm', '2', '3', 0,
  /* 367 */ 'z', 'm', 'm', '2', '3', 0,
  /* 373 */ 'b', 'n', 'd', '3', 0,
  /* 378 */ 'k', '3', 0,
  /* 381 */ 'x', 'm', 'm', '3', 0,
  /* 386 */ 'y', 'm', 'm', '3', 0,
  /* 391 */ 'z', 'm', 'm', '3', 0,
  /* 396 */ 'f', 'p', '3', 0,
  /* 400 */ 'c', 'r', '3', 0,
  /* 404 */ 'd', 'r', '3', 0,
  /* 408 */ 'x', 'm', 'm', '1', '4', 0,
  /* 414 */ 'y', 'm', 'm', '1', '4', 0,
  /* 420 */ 'z', 'm', 'm', '1', '4', 0,
  /* 426 */ 'c', 'r', '1', '4', 0,
  /* 431 */ 'd', 'r', '1', '4', 0,
  /* 436 */ 'x', 'm', 'm', '2', '4', 0,
  /* 442 */ 'y', 'm', 'm', '2', '4', 0,
  /* 448 */ 'z', 'm', 'm', '2', '4', 0,
  /* 454 */ 'k', '4', 0,
  /* 457 */ 'x', 'm', 'm', '4', 0,
  /* 462 */ 'y', 'm', 'm', '4', 0,
  /* 467 */ 'z', 'm', 'm', '4', 0,
  /* 472 */ 'f', 'p', '4', 0,
  /* 476 */ 'c', 'r', '4', 0,
  /* 480 */ 'd', 'r', '4', 0,
  /* 484 */ 'x', 'm', 'm', '1', '5', 0,
  /* 490 */ 'y', 'm', 'm', '1', '5', 0,
  /* 496 */ 'z', 'm', 'm', '1', '5', 0,
  /* 502 */ 'c', 'r', '1', '5', 0,
  /* 507 */ 'd', 'r', '1', '5', 0,
  /* 512 */ 'x', 'm', 'm', '2', '5', 0,
  /* 518 */ 'y', 'm', 'm', '2', '5', 0,
  /* 524 */ 'z', 'm', 'm', '2', '5', 0,
  /* 530 */ 'k', '5', 0,
  /* 533 */ 'x', 'm', 'm', '5', 0,
  /* 538 */ 'y', 'm', 'm', '5', 0,
  /* 543 */ 'z', 'm', 'm', '5', 0,
  /* 548 */ 'f', 'p', '5', 0,
  /* 552 */ 'c', 'r', '5', 0,
  /* 556 */ 'd', 'r', '5', 0,
  /* 560 */ 'x', 'm', 'm', '1', '6', 0,
  /* 566 */ 'y', 'm', 'm', '1', '6', 0,
  /* 572 */ 'z', 'm', 'm', '1', '6', 0,
  /* 578 */ 'x', 'm', 'm', '2', '6', 0,
  /* 584 */ 'y', 'm', 'm', '2', '6', 0,
  /* 590 */ 'z', 'm', 'm', '2', '6', 0,
  /* 596 */ 'k', '6', 0,
  /* 599 */ 'x', 'm', 'm', '6', 0,
  /* 604 */ 'y', 'm', 'm', '6', 0,
  /* 609 */ 'z', 'm', 'm', '6', 0,
  /* 614 */ 'f', 'p', '6', 0,
  /* 618 */ 'c', 'r', '6', 0,
  /* 622 */ 'd', 'r', '6', 0,
  /* 626 */ 'x', 'm', 'm', '1', '7', 0,
  /* 632 */ 'y', 'm', 'm', '1', '7', 0,
  /* 638 */ 'z', 'm', 'm', '1', '7', 0,
  /* 644 */ 'x', 'm', 'm', '2', '7', 0,
  /* 650 */ 'y', 'm', 'm', '2', '7', 0,
  /* 656 */ 'z', 'm', 'm', '2', '7', 0,
  /* 662 */ 'k', '7', 0,
  /* 665 */ 'x', 'm', 'm', '7', 0,
  /* 670 */ 'y', 'm', 'm', '7', 0,
  /* 675 */ 'z', 'm', 'm', '7', 0,
  /* 680 */ 'f', 'p', '7', 0,
  /* 684 */ 'c', 'r', '7', 0,
  /* 688 */ 'd', 'r', '7', 0,
  /* 692 */ 'x', 'm', 'm', '1', '8', 0,
  /* 698 */ 'y', 'm', 'm', '1', '8', 0,
  /* 704 */ 'z', 'm', 'm', '1', '8', 0,
  /* 710 */ 'x', 'm', 'm', '2', '8', 0,
  /* 716 */ 'y', 'm', 'm', '2', '8', 0,
  /* 722 */ 'z', 'm', 'm', '2', '8', 0,
  /* 728 */ 'x', 'm', 'm', '8', 0,
  /* 733 */ 'y', 'm', 'm', '8', 0,
  /* 738 */ 'z', 'm', 'm', '8', 0,
  /* 743 */ 'c', 'r', '8', 0,
  /* 747 */ 'd', 'r', '8', 0,
  /* 751 */ 'x', 'm', 'm', '1', '9', 0,
  /* 757 */ 'y', 'm', 'm', '1', '9', 0,
  /* 763 */ 'z', 'm', 'm', '1', '9', 0,
  /* 769 */ 'x', 'm', 'm', '2', '9', 0,
  /* 775 */ 'y', 'm', 'm', '2', '9', 0,
  /* 781 */ 'z', 'm', 'm', '2', '9', 0,
  /* 787 */ 'x', 'm', 'm', '9', 0,
  /* 792 */ 'y', 'm', 'm', '9', 0,
  /* 797 */ 'z', 'm', 'm', '9', 0,
  /* 802 */ 'c', 'r', '9', 0,
  /* 806 */ 'd', 'r', '9', 0,
  /* 810 */ 'R', '1', '0', 'B', 'H', 0,
  /* 816 */ 'R', '1', '1', 'B', 'H', 0,
  /* 822 */ 'R', '1', '2', 'B', 'H', 0,
  /* 828 */ 'R', '1', '3', 'B', 'H', 0,
  /* 834 */ 'R', '1', '4', 'B', 'H', 0,
  /* 840 */ 'R', '1', '5', 'B', 'H', 0,
  /* 846 */ 'R', '8', 'B', 'H', 0,
  /* 851 */ 'R', '9', 'B', 'H', 0,
  /* 856 */ 'D', 'I', 'H', 0,
  /* 860 */ 'S', 'I', 'H', 0,
  /* 864 */ 'B', 'P', 'H', 0,
  /* 868 */ 'S', 'P', 'H', 0,
  /* 872 */ 'R', '1', '0', 'W', 'H', 0,
  /* 878 */ 'R', '1', '1', 'W', 'H', 0,
  /* 884 */ 'R', '1', '2', 'W', 'H', 0,
  /* 890 */ 'R', '1', '3', 'W', 'H', 0,
  /* 896 */ 'R', '1', '4', 'W', 'H', 0,
  /* 902 */ 'R', '1', '5', 'W', 'H', 0,
  /* 908 */ 'R', '8', 'W', 'H', 0,
  /* 913 */ 'R', '9', 'W', 'H', 0,
  /* 918 */ 'H', 'D', 'I', 0,
  /* 922 */ 'H', 'S', 'I', 0,
  /* 926 */ 'H', 'B', 'P', 0,
  /* 930 */ 'H', 'I', 'P', 0,
  /* 934 */ 'H', 'S', 'P', 0,
  /* 938 */ 'H', 'A', 'X', 0,
  /* 942 */ 'H', 'B', 'X', 0,
  /* 946 */ 'H', 'C', 'X', 0,
  /* 950 */ 'H', 'D', 'X', 0,
  /* 954 */ 'r', '1', '0', 'b', 0,
  /* 959 */ 'r', '1', '1', 'b', 0,
  /* 964 */ 'r', '1', '2', 'b', 0,
  /* 969 */ 'r', '1', '3', 'b', 0,
  /* 974 */ 'r', '1', '4', 'b', 0,
  /* 979 */ 'r', '1', '5', 'b', 0,
  /* 984 */ 'r', '8', 'b', 0,
  /* 988 */ 'r', '9', 'b', 0,
  /* 992 */ 'r', '1', '0', 'd', 0,
  /* 997 */ 'r', '1', '1', 'd', 0,
  /* 1002 */ 'r', '1', '2', 'd', 0,
  /* 1007 */ 'r', '1', '3', 'd', 0,
  /* 1012 */ 'r', '1', '4', 'd', 0,
  /* 1017 */ 'r', '1', '5', 'd', 0,
  /* 1022 */ 'r', '8', 'd', 0,
  /* 1026 */ 'r', '9', 'd', 0,
  /* 1030 */ 'd', 'i', 'r', 'f', 'l', 'a', 'g', 0,
  /* 1038 */ 'a', 'h', 0,
  /* 1041 */ 'b', 'h', 0,
  /* 1044 */ 'c', 'h', 0,
  /* 1047 */ 'd', 'h', 0,
  /* 1050 */ 'e', 'd', 'i', 0,
  /* 1054 */ 'r', 'd', 'i', 0,
  /* 1058 */ 'e', 's', 'i', 0,
  /* 1062 */ 'r', 's', 'i', 0,
  /* 1066 */ 'a', 'l', 0,
  /* 1069 */ 'b', 'l', 0,
  /* 1072 */ 'c', 'l', 0,
  /* 1075 */ 'd', 'l', 0,
  /* 1078 */ 'd', 'i', 'l', 0,
  /* 1082 */ 's', 'i', 'l', 0,
  /* 1086 */ 'b', 'p', 'l', 0,
  /* 1090 */ 's', 'p', 'l', 0,
  /* 1094 */ 'e', 'b', 'p', 0,
  /* 1098 */ 'r', 'b', 'p', 0,
  /* 1102 */ 'e', 'i', 'p', 0,
  /* 1106 */ 'r', 'i', 'p', 0,
  /* 1110 */ 'e', 's', 'p', 0,
  /* 1114 */ 'r', 's', 'p', 0,
  /* 1118 */ 's', 's', 'p', 0,
  /* 1122 */ 'c', 's', 0,
  /* 1125 */ 'd', 's', 0,
  /* 1128 */ 'e', 's', 0,
  /* 1131 */ 'f', 's', 0,
  /* 1134 */ 'f', 'l', 'a', 'g', 's', 0,
  /* 1140 */ 's', 's', 0,
  /* 1143 */ 'r', '1', '0', 'w', 0,
  /* 1148 */ 'r', '1', '1', 'w', 0,
  /* 1153 */ 'r', '1', '2', 'w', 0,
  /* 1158 */ 'r', '1', '3', 'w', 0,
  /* 1163 */ 'r', '1', '4', 'w', 0,
  /* 1168 */ 'r', '1', '5', 'w', 0,
  /* 1173 */ 'r', '8', 'w', 0,
  /* 1177 */ 'r', '9', 'w', 0,
  /* 1181 */ 'f', 'p', 's', 'w', 0,
  /* 1186 */ 'e', 'a', 'x', 0,
  /* 1190 */ 'r', 'a', 'x', 0,
  /* 1194 */ 'e', 'b', 'x', 0,
  /* 1198 */ 'r', 'b', 'x', 0,
  /* 1202 */ 'e', 'c', 'x', 0,
  /* 1206 */ 'r', 'c', 'x', 0,
  /* 1210 */ 'e', 'd', 'x', 0,
  /* 1214 */ 'r', 'd', 'x', 0,
  /* 1218 */ 'e', 'i', 'z', 0,
  /* 1222 */ 'r', 'i', 'z', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    1038, 1066, 1187, 1041, 1069, 1095, 864, 1086, 1195, 1044, 1072, 1122, 1203, 1030,
    1047, 1051, 856, 1078, 1075, 1125, 1211, 1186, 1094, 1194, 1202, 1050, 1210, 1134,
    1102, 1218, 1128, 1058, 1110, 1181, 1131, 1137, 938, 926, 942, 946, 918, 950,
    930, 922, 934, 1103, 1190, 1098, 1198, 1206, 1054, 1214, 1106, 1222, 1062, 1114,
    1059, 860, 1082, 1111, 868, 1090, 1140, 1118, 112, 211, 292, 373, 139, 238,
    319, 400, 476, 552, 618, 684, 743, 802, 66, 165, 264, 345, 426, 502,
    143, 242, 323, 404, 480, 556, 622, 688, 747, 806, 71, 170, 269, 350,
    431, 507, 135, 234, 315, 396, 472, 548, 614, 680, 117, 216, 297, 378,
    454, 530, 596, 662, 121, 220, 301, 382, 458, 534, 600, 666, 744, 803,
    67, 166, 265, 346, 427, 503, 0, 6, 12, 18, 24, 30, 36, 42,
    120, 219, 300, 381, 457, 533, 599, 665, 728, 787, 48, 147, 246, 327,
    408, 484, 560, 626, 692, 751, 76, 175, 274, 355, 436, 512, 578, 644,
    710, 769, 94, 193, 125, 224, 305, 386, 462, 538, 604, 670, 733, 792,
    54, 153, 252, 333, 414, 490, 566, 632, 698, 757, 82, 181, 280, 361,
    442, 518, 584, 650, 716, 775, 100, 199, 130, 229, 310, 391, 467, 543,
    609, 675, 738, 797, 60, 159, 258, 339, 420, 496, 572, 638, 704, 763,
    88, 187, 286, 367, 448, 524, 590, 656, 722, 781, 106, 205, 984, 988,
    954, 959, 964, 969, 974, 979, 846, 851, 810, 816, 822, 828, 834, 840,
    1022, 1026, 992, 997, 1002, 1007, 1012, 1017, 1173, 1177, 1143, 1148, 1153, 1158,
    1163, 1168, 908, 913, 872, 878, 884, 890, 896, 902,
  };

  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static char *printAliasInstr(MCInst *MI, SStream *OS)
{
  char *tmp, *AsmMnem, *AsmOps, *c;
  const char *AsmString;
  switch (MCInst_getOpcode(MI)) {
  default: return false;
  case X86_AAD8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAD8i8 10)
      AsmString = "aad";
      break;
    }
    return NULL;
  case X86_AAM8i8:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10) {
      // (AAM8i8 10)
      AsmString = "aam";
      break;
    }
    return NULL;
  case X86_XSTORE:
    if (MCInst_getNumOperands(MI) == 0) {
      // (XSTORE)
      AsmString = "xstorerng";
      break;
    }
    return NULL;
  }


  tmp = cs_strdup(AsmString);
  AsmMnem = tmp;
  for(AsmOps = tmp; *AsmOps; AsmOps++) {
    if (*AsmOps == ' ' || *AsmOps == '\t') {
      *AsmOps = '\0';
      AsmOps++;
      break;
    }
  }
  SStream_concat0(OS, AsmMnem);
  if (*AsmOps) {
    SStream_concat0(OS, "\t");
    for (c = AsmOps; *c; c++) {
      if (*c == '$') {
        c += 1;
        if (*c == (char)0xff) {
          c += 1;
          // OpIdx = *c - 1;
          c += 1;
          // PrintMethodIdx = *c - 1;
          // printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, *c - 1, OS);
      } else {
        SStream_concat(OS, "%c", *c);
      }
    }
  }
  return tmp;
}

#endif // PRINT_ALIAS_INSTR
        
